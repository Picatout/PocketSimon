MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; NAME: PocketSimon
                      00002 ; DESC:  simon game implemented on a PIC10F202
                      00003 ; COPYRIGHT: jacques Deschenes, 2012,2016  
                      00004 ; LICENCE: GPLv3    
                      00005 ; DATE: 2012-03-05
                      00006 ; REVISION: 2016-12-31    
                      00007 ; VERSION: 1.1
                      00008 ; 
                      00009 ; GAME:  4 LEDs associated with 4 notes. A sequence of notes must be repeated by
                      00010 ; the player. At success a new note is appended at the end of sequence.
                      00011 ; After 6, 12, 18, 24 and 32 notes success a tune is played. The maximun length of
                      00012 ; sequence is 32 notes. A player that succeed to replay the full 32 notes sequence
                      00013 ; hear the complete victory tune after what the game start over.
                      00014 ; At end of each game the length of sequence is displayed.
                      00015 ; The display work like this:
                      00016 ;  BLUE LED is 25
                      00017 ;  YELLOW LED is 10
                      00018 ;  RED LED is 5
                      00019 ;  GREEN LED is 1
                      00020 ; length=NB*25+NY*10+NR*5+NG
                      00021 ;  where Nx is the number of blink for each color.    
                      00022 ; At first error the game is over and a MCU wait for a new set.
                      00023 ; At power on the MCU run a Power On Self Test, which consist of lighting 
                      00024 ; the 4 LEDs sequencially while sounding the associated note. 
                      00025 ; After POST the 4 LEDs light in loop until the player press a
                      00026 ; button to start game. 
                      00027 ;
                      00028 ; DESCRIPTION: the purpose of this project is to demonstrate the use of a single
                      00029 ; logic I/O to read many switches using a capacitor charging time.
                      00030 ; The game use 4 switches that are all connected  to a resistors ladder. The bottom
                      00031 ; of this ladder is connected to a capacitor and to the GP3 input. The time it take
                      00032 ; for this capacitor to charge to a logic 1 level depend on which button is pressed.    
                      00033 ; Four LEDs of different colour are connected to GP0 and GP1
                      00034 ; The audio output is to GP2
                      00035 ; a PNP small switching transistor is used to drive an 150 ohm speaker
                      00036 ; Another NPN small signal transistor is also connected GP2. This one is used
                      00037 ; to discharge the switches timing capacitor. As the 2 transistors are controlled by
                      00038 ; the same I/O as an inconvinience.    
                      00039 ; The inconvience of this design is that when reading buttons a noise is heard in speaker.
                      00040 ; I consider this to be a small inconvience.
                      00041 ; This design connect 2 LEDs in series from V+ to ground and consequently works only
                      00042 ; with a 3 volt power supply. For a voltage over 3 volt a permanent current path is
                      00043 ; formed through diodes GREEN, RED and YELLOW, BLUE and the LEDs are always ligthed.
                      00044 ; But with a 3 volt power supply it works fine because the conduction voltage of 2 LEDs
                      00045 ; in series in over 3 volts.
                      00046 ; see schematic for detail.
                      00047 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00048 ;This program is free software: you can redistribute it and/or modify
                      00049 ;    it under the terms of the GNU General Public License as published by
                      00050 ;    the Free Software Foundation, either version 3 of the License, or
                      00051 ;    (at your option) any later version.
                      00052 ;
                      00053 ;    This program is distributed in the hope that it will be useful,
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054 ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                      00055 ;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                      00056 ;    GNU General Public License for more details.
                      00057 ;
                      00058 ;    You should have received a copy of the GNU General Public License
                      00059 ;    along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                      00060 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00061     
                      00062     include P10F202.INC
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Nov 17 2016
                      00005 ;  MPASM PIC10F202 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      00151         LIST
                      00063     radix dec
                      00064     
0FFF   0FEB           00065     __config _MCLRE_OFF & _CP_OFF & _WDTE_OFF  ; Watchdog disabled
                      00066                                                ;'master clear' disabled
                      00067                                                ; no code protection
                      00068 
                      00069     errorlevel 2 ; warning disabled
                      00070 
                      00071 ;;;;;;    MCU option mask ;;;;;;;;;;;;;;;;;;;;
                      00072 #define OPTION_MASK B'01000001';bit7=0, wakeup on I/O change
                      00073                                ;bit6=1, pullup disabled
                      00074                                ;bit5=0, timer0 clock -> Fosc/4.
                      00075                                ;bit4=0, 
                      00076                                ;bti3=0, prescale on TIMER0
                      00077                                ;bit2-0=001, prescale 1:4
                      00078                                ;  TIMR0 increment every 4usec.
                      00079 
                      00080 
                      00081 
                      00082 #define RED_GREEN_TRIS   B'1001'
                      00083 #define YELLOW_BLUE_TRIS B'1010'
                      00084 #define RED_GPIO         B'1011'
                      00085 #define GREEN_GPIO       B'1001'
                      00086 #define YELLOW_GPIO      B'1010'
                      00087 #define BLUE_GPIO        B'1001'
                      00088 
                      00089 #define GREEN  0
                      00090 #define RED    1
                      00091 #define YELLOW 2
                      00092 #define BLUE   3
                      00093 
                      00094 #define BTN_GREEN  0
                      00095 #define BTN_RED    1
                      00096 #define BTN_YELLOW 2
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00097 #define BTN_BLUE   3
                      00098 #define BTN_NONE   4
                      00099 
                      00100 ; note for each color
                      00101 #define GREEN_NOTE   B'01000000'
                      00102 #define RED_NOTE B'01000101'
                      00103 #define YELLOW_NOTE    B'01001001'
                      00104 #define BLUE_NOTE  B'01001100'
                      00105 
                      00106 ; values for muical pauses
                      00107 #define THIRTY2TH B'10111111'
                      00108 #define SIXTEENTH B'10011111'
                      00109 #define HEIGHT    B'01111111'
                      00110 #define QUARTER   B'01011111'
                      00111 #define HALF      B'00111111'
                      00112 #define WHOLE     B'00011111'
                      00113 
                      00114 #define AUDIO  GPIO, GP2
                      00115 #define CLAMP GPIO, GP2
                      00116 
                      00117 ; charging time delay
                      00118 ; this is adjusted by testing
                      00119 ; It may vary due to components
                      00120 ; tolerance.
                      00121 ; When pressing RED button if
                      00122 ; GREEN LED turn on increase
                      00123 ; GRN_CNT value.
                      00124 ; On the contrary if YELLOW LED
                      00125 ; turn on decrease GRN_CNT value.                              
                      00126 #define GRN_CNT 32
                      00127 #define RED_CNT 2*GRN_CNT
                      00128 #define YEL_CNT 3*GRN_CNT
                      00129 #define BLUE_CNT 4*GRN_CNT
                      00130 #define TC_MAX 5*GRN_CNT
                      00131 
                      00132 ;;;;;;;;;;;;    MACROS  ;;;;;;;;;;;;;;;;;;;;;;
                      00133 
                      00134 
                      00135 led_off macro
                      00136  movlw B'1011'
                      00137  tris GPIO
                      00138  endm
                      00139 
                      00140 note_off macro
                      00141  bsf AUDIO
                      00142  endm
                      00143 
                      00144 note_on macro
                      00145  bcf AUDIO
                      00146  endm
                      00147 
                      00148 ; keep C3 capacitor discharged 
                      00149 clamp_on macro
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00150  bsf CLAMP
                      00151  endm
                      00152 
                      00153 ; enable C3 capacitor to charge. 
                      00154 clamp_off macro
                      00155  bcf CLAMP
                      00156  endm
                      00157 
                      00158 ; switch marco
                      00159 switch macro var ; put variable in W for use by following case
                      00160  movfw var
                      00161  endm
                      00162 
                      00163 case macro  n, address  ; go to address if W==n
                      00164  xorlw n
                      00165  skpnz
                      00166  goto address
                      00167  xorlw n ; reset W for next case
                      00168  endm
                      00169 
                      00170 ; load 16 bits variable with constant
                      00171 ; use conditional assembly to optimize size
                      00172 ; depending on constant value.
                      00173 ; resulting code size is between 2 and 4 instructions 
                      00174 loadr16 macro r16, n 
                      00175  local h,l
                      00176  h=high n
                      00177  l=low n
                      00178  if l==0
                      00179    clrf r16
                      00180  else
                      00181    movlw low n
                      00182    movwf r16
                      00183  endif
                      00184  if h==0
                      00185    clrf r16+1
                      00186  else
                      00187    movlw h
                      00188    movwf r16+1
                      00189  endif
                      00190  endm
                      00191 
                      00192 ;;;;;;;;;;;;;;;; VARIABLES  ;;;;;;;;;;;;;;;;;;;;;
                      00193     udata
0000                  00194   btn_down res 1  ; which button is down
0001                  00195   led res 1 ; active led value
0002                  00196   delay res 2 ; delay counter used by delay_ms subroutine.
0004                  00197   half_period res 1 ; note half-period delay
0005                  00198   timeout res 2 ; inactivity timeout
0007                  00199   cap_cnt res 1 ; capacitor charge time
0008                  00200   notes_cnt res 1 ; sequence length
0009                  00201   rand res 3 ; pseudo random number generator register
000C                  00202   tune_array res 8 ; note sequence array maximun 32 notes. 2 bits used per note.
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0014                  00203   t0 res 1 ; temporary storage
0015                  00204   t1 res 1 
0016                  00205   t2 res 1
0017                  00206   t3 res 1
                      00207 
                      00208 ; access to higher bytes of multibytes variables 
                      00209 #define delayH delay+1
                      00210 #define timeoutH timeout+1
                      00211 #define randH rand+1
                      00212 #define randU rand+2
                      00213  
                      00214   code 
                      00215 ;;;;;;;;;;;;;;;;;;; CODE SEGMENT ;;;;;;;;;;;;;;;;;;
                      00216     org 0
0000   0A??           00217  goto init
                      00218 
                      00219 ;;;;;;;;;;    delay_ms  ;;;;;;;;;;;;;;;;;;
                      00220 ; delay in miliseconds
                      00221 ; delay = value in msec
                      00222 
0001                  00223 delay_ms:
0001   0C07           00224  movlw .7
0002   0021           00225  movwf TMR0
0003   0201           00226  movfw TMR0
0004   0743           00227  skpz
0005   0A??           00228  goto $-2
0006   0C01           00229  movlw 1
0007   00??           00230  subwf delay,F
0008   0703           00231  skpc
0009   00??           00232  subwf delayH,F
000A   0603           00233  skpnc
000B   0A??           00234  goto delay_ms
000C   0800           00235  return
                      00236  
                      00237 ;translate button to corresponding note
000D                  00238 translate_table:
000D   01E2           00239  addwf PCL, F
000E   0840           00240  dt GREEN_NOTE
000F   0845           00241  dt RED_NOTE
0010   0849           00242  dt YELLOW_NOTE
0011   084C           00243  dt BLUE_NOTE
                      00244 
                      00245 ; tempered scale half-period values 
0012                  00246 note_table: 
0012   01E2           00247  addwf PCL, F
0013   08FE           00248  dt .254  ; G2     blue note (0)
0014   08F0           00249  dt .240  ; G#2
0015   08E2           00250  dt .226  ; A2
0016   08D6           00251  dt .214  ; A#2
0017   08C9           00252  dt .201  ; B2
0018   08BE           00253  dt .190  ; C3     yellow note (5)
0019   08B3           00254  dt .179  ; C#3
001A   08A9           00255  dt .169  ; D3
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001B   08A0           00256  dt .160  ; D#3
001C   0897           00257  dt .151  ; E3     red note (9)
001D   088E           00258  dt .142  ; F3
001E   0886           00259  dt .134  ; F#3
001F   087F           00260  dt .127  ; G3     green note (12)
0020   0877           00261  dt .119  ; G#3
0021   0871           00262  dt .113  ; A3
0022   086A           00263  dt .106  ; A#3
0023   0864           00264  dt .100  ; B3
0024   085F           00265  dt .95   ; C4
0025   0859           00266  dt .89   ; C#4
0026   0854           00267  dt .84   ; D4
0027   084F           00268  dt .79   ; D#4
0028   084B           00269  dt .75   ; E4
0029   0847           00270  dt .71   ; F4
002A   0843           00271  dt .67   ; F#4
002B   083F           00272  dt .63   ; G4
                      00273 
                      00274 ; rocky 1 movie theme 
002C                  00275 rocky_theme:
002C   01E2           00276  addwf PCL,F
002D   0889           00277  dt B'10001001' ; 16e
002E   086B           00278  dt B'01101011' ; 8g
002F   089F           00279  dt B'10011111' ; 16p
0030   082E           00280  dt B'00101110' ; 2a
0031   087F           00281  dt B'01111111' ; 8p
0032   088E           00282  dt B'10001110' ; 16a
0033   0870           00283  dt B'01110000' ; 8b
0034   089F           00284  dt B'10011111' ; 16p
0035   0829           00285  dt B'00101001' ; 2e
0036   089F           00286  dt B'10011111' ; 16p
0037   08BF           00287  dt B'10111111' ; 32p
0038   0889           00288  dt B'10001001' ; 16e
0039   086B           00289  dt B'01101011' ; 8g
003A   089F           00290  dt B'10011111' ; 16p
003B   082E           00291  dt B'00101110' ; 2a
003C   089F           00292  dt B'10011111' ; 16p
003D   08BF           00293  dt B'10111111' ; 32p
003E   088E           00294  dt B'10001110' ; 16a
003F   0870           00295  dt B'01110000' ; 8b
0040   089F           00296  dt B'10011111' ; 16p
0041   0809           00297  dt B'00001001' ; 1e
0042   087F           00298  dt B'01111111' ; 8p
0043   089F           00299  dt B'10011111' ; 16p
0044   0887           00300  dt B'10000111' ; 16d4
0045   0885           00301  dt B'10000101' ; 16c4
0046   0867           00302  dt B'01100111' ; 8d4
0047   089F           00303  dt B'10011111' ; 16p
0048   0891           00304  dt B'10010001' ; 16c5
0049   0893           00305  dt B'10010011' ; 16d5
004A   0855           00306  dt B'01010101' ; 4e5
004B   085F           00307  dt B'01011111' ; 4p
004C   0891           00308  dt B'10010001' ; 16c5
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

004D   0891           00309  dt B'10010001' ; 16c5
004E   0870           00310  dt B'01110000' ; 8b
004F   0890           00311  dt B'10010000' ; 16b
0050   086E           00312  dt B'01101110' ; 8a
0051   088E           00313  dt B'10001110' ; 16a
0052   084B           00314  dt B'01001011' ; 4g
0053   0876           00315  dt B'01110110' ; 8f5
0054   0815           00316  dt B'00010101' ; 1e5
                      00317 
                      00318 
                      00319 
                      00320 ; GPIO and TRIS values for each led
0055                  00321 led_gpio_table:
0055   01E2           00322  addwf PCL,F
0056   0899           00323  dt GREEN_GPIO + (RED_GREEN_TRIS<<4)
0057   089B           00324  dt RED_GPIO + (RED_GREEN_TRIS<<4)
0058   08AA           00325  dt YELLOW_GPIO + (YELLOW_BLUE_TRIS<<4)
0059   08A9           00326  dt BLUE_GPIO + (YELLOW_BLUE_TRIS<<4)
                      00327  
                      00328 ;;;;;;;  led_on  ;;;;;;;
                      00329 ;; light LED  
                      00330 ;; input: 
                      00331 ;;   variable 'led' 
                      00332 ;;   value is an index in led_gpio_table
                      00333 ;;;;;;;;;;;;;;;;;;;;;;;; 
005A                  00334 led_on:
005A   02??           00335  movfw led
005B   09??           00336  call led_gpio_table
005C   0026           00337  movwf GPIO
005D   0021           00338  movwf TMR0 ; use TMR0 as temporary storage
005E   0381           00339  swapf TMR0,W
005F   0006           00340  tris GPIO
0060   0800           00341  return
                      00342 
                      00343 
                      00344 ;;;;;;;;;;;;;;;;;  read_buttons ;;;;;;;;;;;
                      00345 ;; read GP3 
                      00346 ;; when GP3 == 1
                      00347 ;; compare  cap_cnt with threshold values to identify button
                      00348 ;; WORKING:
                      00349 ;;   first the clamp is released on 'C3'
                      00350 ;;   Capacitor start charging toward Vdd.
                      00351 ;;   Then variable 'cap_cnt' is incremented
                      00352 ;;   until GP3 read as '1'.
                      00353 ;;   The final value of 'cap_cnt' determine
                      00354 ;;   if a button is down and which one. 
                      00355 ;; output:
                      00356 ;;  btn_down variable
                      00357 ;;  Carry bit: 0 button down, 1 no button down 
                      00358 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
0061                  00359 read_buttons:
0061   00??           00360   clrf btn_down
0062   00??           00361   clrf cap_cnt
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00362   clamp_off ; capacitor start charging.
0063   0446               M  bcf CLAMP
0064                  00363 rbtn1: ; charging time loop
0064   0666           00364   btfsc GPIO, GP3
0065   0A??           00365   goto rbtn3
0066   03??           00366   incfsz cap_cnt,F
0067   0A??           00367   goto rbtn1
0068   0C04           00368   movlw BTN_NONE ; charging time too long,
0069   00??           00369   movwf btn_down ; assume no button down.
006A   0503           00370   setc ; carry set at exit means no button down
006B   0A??           00371   goto rb_exit
006C                  00372 rbtn3: ; check cap_cnt value to identify button
006C   0C20           00373   movlw GRN_CNT
006D   00??           00374   subwf cap_cnt, W
006E   0703           00375   skpc
006F   0A??           00376   goto rb_exit  ; BTN_GREEN
0070   02??           00377   incf btn_down,F
0071   0C40           00378   movlw RED_CNT
0072   00??           00379   subwf cap_cnt, W
0073   0703           00380   skpc
0074   0A??           00381   goto rb_exit ; BTN_RED
0075   02??           00382   incf btn_down,F
0076   0C60           00383   movlw YEL_CNT
0077   00??           00384   subwf cap_cnt, W
0078   0703           00385   skpc
0079   0A??           00386   goto rb_exit ; BTN_YELLOW
007A   02??           00387   incf btn_down,F ; BTN_BLUE
007B   0C80           00388   movlw BLUE_CNT
007C   00??           00389   subwf cap_cnt,W
007D   0603           00390   skpnc
007E   02??           00391   incf btn_down,f ; BTN_NONE
007F                  00392 rb_exit:
                      00393   clamp_on
007F   0546               M  bsf CLAMP
0080   0800           00394   return 
                      00395 
                      00396 ;;;;;; store_note  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00397 ;;; store note in tune_array
                      00398 ;;; inputs:
                      00399 ;;;     t0= array index where to store note {0-31}
                      00400 ;;;     t1=note  {0-3} stored as 2 bits value.
                      00401 ;;; This one is a little tricky because each byte is split in 4 slots of
                      00402 ;;; 2 bits. The position in tune_array is index/4 and the slot is the remainder.  
                      00403 ;;; So there is 4 notes per byte. The note must be stored in the good slot without
                      00404 ;;; altering the contain of others slots.
                      00405 ;;;  bits:  76|54|32|10  
                      00406 ;;;  slots: s3|s2|s1|s0  
                      00407 ;;; To get that result a AND mask is create to reset the slot to 0 and the OR
                      00408 ;;; operation is used to insert the note in the slot.  
                      00409 ;;; exemple: say the index is 5 and the note is 1. then
                      00410 ;;; byte order is 6/4=1
                      00411 ;;; slot is 6 % 4 = 2
                      00412 ;;;  AND mask is 0b11001111
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00413 ;;                   ^^ slot 2 will be set to 0 after AND operation     
                      00414 ;;;  OR mask is  0b00010000 
                      00415 ;;;                  ^^  slot 2 will be set to 1 after OR operation
                      00416 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
0081                  00417 store_note:
                      00418 ;initialize array pointer    
0081   0C??           00419  movlw tune_array
0082   0024           00420  movwf FSR
                      00421 ; FSR += index/4 
                      00422 ; clrc ; not needed because FSR is only 5 bits
0083   03??           00423  rrf t0,W
0084   00??           00424  movwf t2
                      00425 ; clrc  ; not need because FSR is only 5 bits
0085   03??           00426  rrf t2,W
0086   01E4           00427  addwf FSR,F ; now FSR point to byte in tune_array
                      00428 ; create AND mask and rotate note in right slot
0087   0CFC           00429  movlw 0xFC
0088   00??           00430  movwf t2 ; t2=AND mask
0089   0C03           00431  movlw 3
008A   01??           00432  andwf t1,F ; t1=note (ensure all bits are 0 except bits 0,1)
008B   01??           00433  andwf t0,F   ; t0 = slot number (index % 4 )
008C   0643           00434  skpnz
008D   0A??           00435  goto store_note02 ; no need to rotate
008E                  00436 store_note01: 
                      00437 ;; rotate left mask 1 slot 
008E   0503           00438  bsf STATUS,C
008F   03??           00439  rlf t2,F
0090   03??           00440  rlf t2,F
                      00441 ;; rotate left note 1 slot 
0091   0403           00442  clrc 
0092   03??           00443  rlf t1,F
0093   03??           00444  rlf t1,F
0094   02??           00445  decfsz t0,F
0095   0A??           00446  goto store_note01
0096                  00447 store_note02:
                      00448 ; the shifting is done, store note in slot. 
0096   02??           00449  movfw t2     ; apply AND mask
0097   0160           00450  andwf INDF,F ; to reset that slot to 0
0098   02??           00451  movfw t1     ; W=note
0099   0120           00452  iorwf INDF,F ; insert note in slot
009A   0800           00453  return
                      00454 
                      00455 ;;;;;;  load_note  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00456 ;;; get note from tune_array and put it in W 
                      00457 ;;; input: W is array index  {0-31}
                      00458 ;;; output: t1 note {0-3}
                      00459 ;;; byte_order is index/4
                      00460 ;;; slot is index % 4
                      00461 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
009B                  00462 load_note:
009B   00??           00463  movwf t0 ; save index
                      00464 ; set array pointer
009C   0C??           00465  movlw tune_array
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

009D   0024           00466  movwf FSR
                      00467 ; ignore carry because FSR is only 5 bits 
009E   03??           00468  rrf t0,W
009F   00??           00469  movwf t1
00A0   03??           00470  rrf t1,W
00A1   01E4           00471  addwf FSR,F ; FSR=tune_array+index/4
00A2   0200           00472  movfw INDF   ; get the byte containing the note slot
00A3   00??           00473  movwf t1 ; save it in t1
00A4   0C03           00474  movlw 3
00A5   01??           00475  andwf t0,F ; get slot
00A6   0643           00476  skpnz
00A7   0A??           00477  goto load_note02
                      00478 ; slot shifted right 1 position 
00A8                  00479 rotate_1slot_right:
00A8   03??           00480  rrf t1,F
00A9   03??           00481  rrf t1,F
00AA   02??           00482  decfsz t0,F
00AB   0A??           00483  goto rotate_1slot_right
00AC                  00484 load_note02:
00AC   01??           00485  andwf t1,F
00AD   0800           00486  return
                      00487 
                      00488 ;;;;;;;;;  random  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00489 ;; pseudo random number generator
                      00490 ;; 24 bits linear feedback shift register 
                      00491 ;; REF: http://en.wikipedia.org/wiki/Linear_feedback_shift_register
                      00492 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00AE                  00493 random:  
00AE   0403           00494   clrc
00AF   03??           00495   rrf randU,F
00B0   03??           00496   rrf randH,F
00B1   03??           00497   rrf rand,F
00B2   0703           00498   skpc
00B3   0800           00499   return
00B4   0CE1           00500   movlw 0xE1
00B5   01??           00501   xorwf randU, F
00B6   0800           00502   return
                      00503 
                      00504 ;;;;;;;;;; wait_btn_release  ;;;;;
                      00505 ;; repeatedly read buttons until 
                      00506 ;; until it return BTN_NONE
                      00507 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
00B7                  00508 wait_btn_release:
00B7   09??           00509  call read_buttons
00B8   0703           00510  skpc
00B9   0A??           00511  goto wait_btn_release
00BA   0800           00512  return
                      00513 
                      00514 
                      00515 ;;;;;;;;;;;;; note  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00516 ; play a musical note from tempered scale. 
                      00517 ; input:
                      00518 ;  w = note : encoding  bits 0-4 notes, note 0x1F=pause , bits 5-7 duration
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00519 ; WORKING:
                      00520 ;  This subroutine is cycle counted.
                      00521 ;  Tones period are based on Tcy=1uSec
                      00522 ;  Each path in half-cycle loop is 10 Tcy.
                      00523 ;  Frequencies values are computed based on this 10 Tcy.
                      00524 ;  Any change on this code will alter the frequencies. 
                      00525 ;  timeout and delay form a 24 bits counter -> timeout:delayH:delay 
                      00526 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
00BB                  00527 note:
00BB   00??           00528  movwf t0
                      00529  ; if note=0x1F it is a pause
00BC   0E1F           00530  andlw 0x1F
00BD   0F1F           00531  xorlw 0x1F
00BE   0643           00532  skpnz
00BF   0A??           00533  goto pause
                      00534 ; maximum duration (whole note)=0x30d40 ~2 seconds 
                      00535  loadr16 delay, 0x0D40
  0000                    M  local h,l
  0000000D                M  h=high 0x0D40
  00000040                M  l=low 0x0D40
                          M  if l==0
                          M    clrf delay
                          M  else
00C0   0C40               M    movlw low 0x0D40
00C1   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
00C2   0C0D               M    movlw h
00C3   00??               M    movwf delay+1
                          M  endif
00C4   0C03           00536  movlw 3
00C5   00??           00537  movwf timeout
00C6   03??           00538  swapf t0,W
00C7   00??           00539  movwf t1
00C8   03??           00540  rrf t1,F
00C9   0C07           00541  movlw 0x7
00CA   01??           00542  andwf t1,F
00CB   0643           00543  skpnz
00CC   0A??           00544  goto note02
                      00545 ; divide duration counter by 2 for each count in t1
                      00546 ; to get note duration 
00CD                  00547 note01:
00CD   0403           00548  clrc
00CE   03??           00549  rrf timeout
00CF   03??           00550  rrf delayH,F
00D0   03??           00551  rrf delay,F
00D1   02??           00552  decfsz t1
00D2   0A??           00553  goto note01
00D3                  00554 note02:
00D3   0C1F           00555  movlw 0x1F
00D4   01??           00556  andwf t0,W ; note index in table
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00D5   09??           00557  call note_table
00D6   00??           00558  movwf half_period
                      00559 ; tone generation loop
                      00560 ; WARNING: cycle counted 
                      00561 ; values in note_table depends on 
                      00562 ; the number of cycles in this loop 
00D7                  00563 note1: ; half-period loop
00D7   0C04           00564  movlw B'0100'  ; 
00D8   01A6           00565  xorwf GPIO, F  ; toggle output pin
00D9   02??           00566  movfw half_period ; 
00DA   00??           00567  movwf t0 ; 
00DB   0C01           00568  movlw 1  ; ovherhead 5 TCY
00DC                  00569 note2: ; duration loop
00DC   00??           00570  subwf delay,F ; 1 TCY
00DD   0703           00571  skpc  ; 2|3 TCY
00DE   00??           00572  subwf delayH,F ; 3 TCY 
00DF   0703           00573  skpc ; 4|5 TCY
00E0   00??           00574  subwf timeout,F ; 5 TCY
00E1   0703           00575  skpc ; 6|7 TCY
00E2   0A??           00576  goto note5
00E3   02??           00577  decfsz t0 ; 8|9 TCY
00E4   0A??           00578  goto note2  ; 10 TCY half-cycle loop
00E5   0A??           00579  goto note1 ; 16 TCY complete half-cycle
00E6                  00580 note5:
                      00581  clamp_on
00E6   0546               M  bsf CLAMP
00E7   0800           00582  return
                      00583 
                      00584 ;;;;; musical pause ;;;;;;;;;;;;;;
                      00585 ;; when note value is 0x1F
                      00586 ;; tone subroutine branch here.
                      00587 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
00E8                  00588 pause: ;musical pause
                      00589  loadr16 delay, 2000
  0000                    M  local h,l
  00000007                M  h=high 2000
  000000D0                M  l=low 2000
                          M  if l==0
                          M    clrf delay
                          M  else
00E8   0CD0               M    movlw low 2000
00E9   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
00EA   0C07               M    movlw h
00EB   00??               M    movwf delay+1
                          M  endif
00EC   03??           00590  swapf t0,F
00ED   03??           00591  rrf t0,F
00EE   0C07           00592  movlw 0x7
00EF   01??           00593  andwf t0,F
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00F0   0643           00594  skpnz
00F1   0A??           00595  goto pause01
                      00596 ; divide delay by 2 for each count in t0 
00F2                  00597 pause00: 
00F2   0403           00598  clrc
00F3   03??           00599  rrf delayH,F
00F4   03??           00600  rrf delay,F
00F5   02??           00601  decfsz t0,F
00F6   0A??           00602  goto pause00
00F7                  00603 pause01: 
00F7   09??           00604  call delay_ms
00F8   0800           00605  return
                      00606 
                      00607 
                      00608     
                      00609 ;;;;;;;;;;;;;;;  INITIALIZATION CODE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00610  ; hardware initialization
00F9                  00611 init:
00F9   0C41           00612  movlw OPTION_MASK
00FA   0002           00613  option 
                      00614  led_off
00FB   0C0B               M  movlw B'1011'
00FC   0006               M  tris GPIO
00FD   00??           00615  clrf notes_cnt
00FE   0CA5           00616  movlw 0xA5
00FF   00??           00617  movwf rand
                      00618  clamp_on
0100   0546               M  bsf CLAMP
                      00619 
                      00620 ;;;;;;;;;;;;;;;;;;;;;;;;  MAIN PROCEDURE  ;;;;;;;;;;;;;;;;;;;;;
                      00621 ; The largest chunk of the code is here
                      00622 ; because subroutine calls are limited to 2 levels
                      00623 ; it use a lot of goto instead of call.
                      00624 ; I like to factor code in many subroutines that neast each others
                      00625 ; but this is not possible with this MCU.
                      00626 ; Here is spaghetti code for your degustation (or disgustation), MCU obliged. 
                      00627 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
0101                  00628 main:
                      00629 ;;;;;;;;;;;;;;;;;;;;;;;;
                      00630 ;; power on self test
                      00631 ;; light each LED in sequence
                      00632 ;; with associated tone.
                      00633 ;;;;;;;;;;;;;;;;;;;;;;;; 
0101   00??           00634  clrf led
0102   00??           00635  clrf timeout
0103                  00636 post:
0103   02??           00637  incf timeout,F
0104   09??           00638  call led_on
0105   02??           00639  movfw led
0106   09??           00640  call translate_table ; get note binded to that LED
0107   09??           00641  call note
                      00642  led_off
0108   0C0B               M  movlw B'1011'
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0109   0006               M  tris GPIO
010A   02??           00643  incf led,F
010B   0C03           00644  movlw 3
010C   01??           00645  andwf led,F
010D   09??           00646  call read_buttons
010E   0603           00647  skpnc
010F   0A??           00648  goto post
0110   02??           00649  movfw timeout
0111   00??           00650  movwf rand
0112   09??           00651  call wait_btn_release
                      00652  loadr16 delay, .500
  0000                    M  local h,l
  00000001                M  h=high .500
  000000F4                M  l=low .500
                          M  if l==0
                          M    clrf delay
                          M  else
0113   0CF4               M    movlw low .500
0114   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
0115   0C01               M    movlw h
0116   00??               M    movwf delay+1
                          M  endif
0117   09??           00653  call delay_ms
                      00654 ; game loop.
0118                  00655 play_rand:
0118   02??           00656  movfw notes_cnt
0119   00??           00657  movwf t0
011A   02??           00658  incf notes_cnt,F
                      00659 ; add a random value to sequence 
011B   09??           00660  call random
011C   02??           00661  movfw randU
011D   01??           00662  xorwf randH,W
011E   01??           00663  xorwf rand,W
011F   0E03           00664  andlw 3
0120   00??           00665  movwf t1
0121   09??           00666  call store_note
0122   00??           00667  clrf t3 ; notes counter
                      00668 ; play sequence loop 
0123                  00669 play_rand02:
0123   02??           00670  movfw t3
0124   09??           00671  call load_note
0125   02??           00672  movfw t1
0126   00??           00673  movwf led
0127   09??           00674  call led_on
0128   02??           00675  movfw led
0129   09??           00676  call translate_table
012A   09??           00677  call note
                      00678  led_off
012B   0C0B               M  movlw B'1011'
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

012C   0006               M  tris GPIO
                      00679  loadr16 delay, .100
  0000                    M  local h,l
  00000000                M  h=high .100
  00000064                M  l=low .100
                          M  if l==0
                          M    clrf delay
                          M  else
012D   0C64               M    movlw low .100
012E   00??               M    movwf delay
                          M  endif
                          M  if h==0
012F   00??               M    clrf delay+1
                          M  else
                          M    movlw h
                          M    movwf delay+1
                          M  endif
0130   09??           00680  call delay_ms ; 1/10 second pause
0131   02??           00681  incf t3,F
0132   02??           00682  movfw notes_cnt
0133   00??           00683  subwf t3,W
0134   0743           00684  skpz
0135   0A??           00685  goto play_rand02
                      00686 ; wait player playing sequence back
0136                  00687 wait_playback:
0136   00??           00688  clrf t3 ; notes counter
0137                  00689 wait01:
0137   0CFA           00690  movlw .250   ; maximun delay between each button 250 msec.
0138   00??           00691  movwf timeout
0139                  00692 wait02: ; wait button loop
                      00693  loadr16 delay, .20
  0000                    M  local h,l
  00000000                M  h=high .20
  00000014                M  l=low .20
                          M  if l==0
                          M    clrf delay
                          M  else
0139   0C14               M    movlw low .20
013A   00??               M    movwf delay
                          M  endif
                          M  if h==0
013B   00??               M    clrf delay+1
                          M  else
                          M    movlw h
                          M    movwf delay+1
                          M  endif
013C   09??           00694  call delay_ms
013D   02??           00695  movfw timeout
013E   00??           00696  movwf rand
013F   00??           00697  decf timeout,F
0140   0643           00698  skpnz
0141   0A??           00699  goto game_over
0142   09??           00700  call read_buttons
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0143   0603           00701  skpnc 
0144   0A??           00702  goto wait02
                      00703  loadr16 delay, .10  ; wait 10 msec before buttons
  0000                    M  local h,l
  00000000                M  h=high .10
  0000000A                M  l=low .10
                          M  if l==0
                          M    clrf delay
                          M  else
0145   0C0A               M    movlw low .10
0146   00??               M    movwf delay
                          M  endif
                          M  if h==0
0147   00??               M    clrf delay+1
                          M  else
                          M    movlw h
                          M    movwf delay+1
                          M  endif
0148   09??           00704  call delay_ms       ; debouncing
0149   09??           00705  call read_buttons
014A   0603           00706  skpnc
014B   0A??           00707  goto wait01 ; no button down
                      00708 ; light LED and play tone corresponding to that button
014C   02??           00709  movfw btn_down
014D   00??           00710  movwf led
014E   09??           00711  call led_on
014F   02??           00712  movfw led
0150   09??           00713  call translate_table
0151   09??           00714  call note
                      00715  led_off
0152   0C0B               M  movlw B'1011'
0153   0006               M  tris GPIO
0154   09??           00716  call wait_btn_release
0155   02??           00717  movfw t3
0156   09??           00718  call load_note
0157   02??           00719  movfw led
0158   00??           00720  subwf t1
0159   0743           00721  skpz
015A   0A??           00722  goto game_over ; not the good one
015B   02??           00723  incf t3,F
015C   02??           00724  movfw notes_cnt
015D   00??           00725  subwf t3,W
015E   0743           00726  skpz
015F   0A??           00727  goto wait01 ; loop to wait for next button
0160                  00728 playback_success
                      00729 ; to understand this 'switch' and 'case'
                      00730 ; machanism see macros above. 
                      00731  switch notes_cnt
0160   02??               M  movfw notes_cnt
                      00732  case .6, victory
0161   0F06               M  xorlw .6
0162   0643               M  skpnz
0163   0A??               M  goto victory
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0164   0F06               M  xorlw .6 ; reset W for next case
                      00733  case .12, victory
0165   0F0C               M  xorlw .12
0166   0643               M  skpnz
0167   0A??               M  goto victory
0168   0F0C               M  xorlw .12 ; reset W for next case
                      00734  case .18, victory
0169   0F12               M  xorlw .18
016A   0643               M  skpnz
016B   0A??               M  goto victory
016C   0F12               M  xorlw .18 ; reset W for next case
                      00735  case .24, victory
016D   0F18               M  xorlw .24
016E   0643               M  skpnz
016F   0A??               M  goto victory
0170   0F18               M  xorlw .24 ; reset W for next case
                      00736  case .32, victory_final
0171   0F20               M  xorlw .32
0172   0643               M  skpnz
0173   0A??               M  goto victory_final
0174   0F20               M  xorlw .32 ; reset W for next case
                      00737  loadr16 delay, .500
  0000                    M  local h,l
  00000001                M  h=high .500
  000000F4                M  l=low .500
                          M  if l==0
                          M    clrf delay
                          M  else
0175   0CF4               M    movlw low .500
0176   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
0177   0C01               M    movlw h
0178   00??               M    movwf delay+1
                          M  endif
                      00738 ; this the default case 
0179   09??           00739  call delay_ms
017A   0A??           00740  goto play_rand
                      00741 ; play rocky_theme at 6,12,18,24 and 32 length success.
                      00742 ; more notes of the theme are played at each milestone.
                      00743 ; If player get at maximum sequence length (i.e. 32)
                      00744 ; the theme is played to end. 
017B                  00745 victory:
017B   02??           00746  movfw notes_cnt
017C   0A??           00747  goto play_victory_theme
                      00748 ; play complete rocky theme.
017D                  00749 victory_final:
017D   00??           00750  clrf notes_cnt
017E   0C28           00751  movlw .40
017F                  00752 play_victory_theme:
017F   00??           00753  movwf t2
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0180   00??           00754  clrf t3
0181                  00755 prt01:
0181   02??           00756  movfw t3
0182   09??           00757  call rocky_theme
0183   09??           00758  call note
0184   02??           00759  incf t3,F
0185   02??           00760  movfw t2
0186   00??           00761  subwf t3,W
0187   0743           00762  skpz
0188   0A??           00763  goto prt01
                      00764  loadr16 delay, 0x400
  0000                    M  local h,l
  00000004                M  h=high 0x400
  00000000                M  l=low 0x400
                          M  if l==0
0189   00??               M    clrf delay
                          M  else
                          M    movlw low 0x400
                          M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
018A   0C04               M    movlw h
018B   00??               M    movwf delay+1
                          M  endif
018C   09??           00765  call delay_ms
018D   0C20           00766  movlw 32
018E   01??           00767  xorwf notes_cnt,W
018F   0743           00768  skpz
0190   0A??           00769  goto play_rand
0191   0A??           00770  goto init
                      00771  
                      00772 ; player failed to repeat sequence
0192                  00773 game_over:
0192   0C38           00774  movlw B'00111000'
0193   09??           00775  call note ; audio alert game over
                      00776 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00777 ;; display sequence length
                      00778 ;; BLUE is 25
                      00779 ;; YELLOW is 10
                      00780 ;; RED is 5
                      00781 ;; GREEN is 1
                      00782 ;; length=NB*25+NY*10+NR*5+NG
                      00783 ;; where Nx is number of blink of
                      00784 ;; each LED.
                      00785 ;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                      00786 #define len notes_cnt
0194   00??           00787  decf len,F
0195                  00788 display_length:
0195   02??           00789  movf len,F
0196   0643           00790  skpnz
0197   0A??           00791  goto wait1sec
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0198   0C03           00792  movlw 3
0199   00??           00793  movwf led
019A   0C19           00794  movlw .25
019B   00??           00795  subwf len,W
019C   0703           00796  skpc
019D   0A??           00797  goto lt25 ; <25
019E   00??           00798  movwf len
019F   0A??           00799  goto blink_led
01A0                  00800 lt25:
01A0   00??           00801  decf led,F
01A1   0C0A           00802  movlw .10
01A2   00??           00803  subwf len,W
01A3   0703           00804  skpc
01A4   0A??           00805  goto lt10; <10
01A5   00??           00806  movwf len
01A6   0A??           00807  goto blink_led
01A7                  00808 lt10:
01A7   00??           00809  decf led,F
01A8   0C05           00810  movlw .5
01A9   00??           00811  subwf len,W
01AA   0703           00812  skpc
01AB   0A??           00813  goto lt5 ; <5
01AC   00??           00814  movwf len
01AD   0A??           00815  goto blink_led
01AE                  00816 lt5:
01AE   00??           00817  decf led,F
01AF   00??           00818  decf len,F
01B0                  00819 blink_led:
01B0   09??           00820  call led_on
                      00821  loadr16 delay, .500
  0000                    M  local h,l
  00000001                M  h=high .500
  000000F4                M  l=low .500
                          M  if l==0
                          M    clrf delay
                          M  else
01B1   0CF4               M    movlw low .500
01B2   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
01B3   0C01               M    movlw h
01B4   00??               M    movwf delay+1
                          M  endif
01B5   09??           00822  call delay_ms ; 500 msec pause
                      00823  led_off
01B6   0C0B               M  movlw B'1011'
01B7   0006               M  tris GPIO
                      00824  loadr16 delay, .500
  0000                    M  local h,l
  00000001                M  h=high .500
  000000F4                M  l=low .500
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M  if l==0
                          M    clrf delay
                          M  else
01B8   0CF4               M    movlw low .500
01B9   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
01BA   0C01               M    movlw h
01BB   00??               M    movwf delay+1
                          M  endif
01BC   09??           00825  call delay_ms ; 500 msec pause
01BD   0A??           00826  goto display_length
                      00827 ;wait 1 second before resuming
                      00828 ;to next_set 
01BE                  00829 wait1sec:
                      00830  loadr16 delay, .1000
  0000                    M  local h,l
  00000003                M  h=high .1000
  000000E8                M  l=low .1000
                          M  if l==0
                          M    clrf delay
                          M  else
01BE   0CE8               M    movlw low .1000
01BF   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
01C0   0C03               M    movlw h
01C1   00??               M    movwf delay+1
                          M  endif
01C2   09??           00831  call delay_ms
01C3   0A??           00832  goto main
                      00833  
0FEB                  00834  end
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE 21


SYMBOL TABLE
  LABEL                             VALUE 

AUDIO                             GPIO, GP2
BLUE                              3
BLUE_CNT                          4*GRN_CNT
BLUE_GPIO                         B'1001'
BLUE_NOTE                         B'01001100'
BTN_BLUE                          3
BTN_GREEN                         0
BTN_NONE                          4
BTN_RED                           1
BTN_YELLOW                        2
C                                 00000000
CAL0                              00000001
CAL1                              00000002
CAL2                              00000003
CAL3                              00000004
CAL4                              00000005
CAL5                              00000006
CAL6                              00000007
CLAMP                             GPIO, GP2
DC                                00000001
F                                 00000001
FOSC4                             00000000
FSR                               00000004
GP0                               00000000
GP1                               00000001
GP2                               00000002
GP3                               00000003
GPIO                              00000006
GPWUF                             00000007
GREEN                             0
GREEN_GPIO                        B'1001'
GREEN_NOTE                        B'01000000'
GRN_CNT                           32
HALF                              B'00111111'
HEIGHT                            B'01111111'
INDF                              00000000
NOT_GPPU                          00000006
NOT_GPWU                          00000007
NOT_PD                            00000003
NOT_TO                            00000004
OPTION_MASK                       B'01000001'
OSCCAL                            00000005
PCL                               00000002
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
QUARTER                           B'01011111'
RED                               1
RED_CNT                           2*GRN_CNT
RED_GPIO                          B'1011'
RED_GREEN_TRIS                    B'1001'
RED_NOTE                          B'01000101'
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE 22


SYMBOL TABLE
  LABEL                             VALUE 

SIXTEENTH                         B'10011111'
STATUS                            00000003
T0CS                              00000005
T0SE                              00000004
TC_MAX                            5*GRN_CNT
THIRTY2TH                         B'10111111'
TMR0                              00000001
TRISIO0                           00000000
TRISIO1                           00000001
TRISIO2                           00000002
TRISIO3                           00000003
W                                 00000000
WHOLE                             B'00011111'
YELLOW                            2
YELLOW_BLUE_TRIS                  B'1010'
YELLOW_GPIO                       B'1010'
YELLOW_NOTE                       B'01001001'
YEL_CNT                           3*GRN_CNT
Z                                 00000002
_.org_0_0005                      00000005
_CONFIG                           00000FFF
_CP_OFF                           00000FFF
_CP_ON                            00000FF7
_IDLOC0                           00000200
_IDLOC1                           00000201
_IDLOC2                           00000202
_IDLOC3                           00000203
_IntRC_OSC                        00000FFF
_MCLRE_OFF                        00000FEF
_MCLRE_ON                         00000FFF
_OSC_IntRC                        00000FFF
_WDTE_OFF                         00000FFB
_WDTE_ON                          00000FFF
_WDT_OFF                          00000FFB
_WDT_ON                           00000FFF
__10F202                          00000001
blink_led                         000001B0
btn_down                          00000000
cap_cnt                           00000007
case                              
clamp_off                         
clamp_on                          
delay                             00000002
delayH                            delay+1
delay_ms                          00000001
display_length                    00000195
game_over                         00000192
half_period                       00000004
init                              000000F9
led                               00000001
led_gpio_table                    00000055
led_off                           
led_on                            0000005A
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE 23


SYMBOL TABLE
  LABEL                             VALUE 

len                               notes_cnt
load_note                         0000009B
load_note02                       000000AC
loadr16                           
lt10                              000001A7
lt25                              000001A0
lt5                               000001AE
main                              00000101
note                              000000BB
note01                            000000CD
note02                            000000D3
note1                             000000D7
note2                             000000DC
note5                             000000E6
note_off                          
note_on                           
note_table                        00000012
notes_cnt                         00000008
pause                             000000E8
pause00                           000000F2
pause01                           000000F7
play_rand                         00000118
play_rand02                       00000123
play_victory_theme                0000017F
playback_success                  00000160
post                              00000103
prt01                             00000181
rand                              00000009
randH                             rand+1
randU                             rand+2
random                            000000AE
rb_exit                           0000007F
rbtn1                             00000064
rbtn3                             0000006C
read_buttons                      00000061
rocky_theme                       0000002C
rotate_1slot_right                000000A8
store_note                        00000081
store_note01                      0000008E
store_note02                      00000096
switch                            
t0                                00000014
t1                                00000015
t2                                00000016
t3                                00000017
timeout                           00000005
timeoutH                          timeout+1
translate_table                   0000000D
tune_array                        0000000C
victory                           0000017B
victory_final                     0000017D
wait01                            00000137
wait02                            00000139
MPASM 5.71                   POCKETSIMON.ASM   1-4-2017  21:46:30         PAGE 24


SYMBOL TABLE
  LABEL                             VALUE 

wait1sec                          000001BE
wait_btn_release                  000000B7
wait_playback                     00000136

Errors   :     0
Warnings :     0 reported,    45 suppressed
Messages :     0 reported,     4 suppressed

