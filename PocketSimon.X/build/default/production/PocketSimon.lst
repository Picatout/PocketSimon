MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; NAME: PocketSimon
                      00002 ; DESC:  simon game implemented on a PIC10F202
                      00003 ; COPYRIGHT: jacques Deschenes, 2012,2016  
                      00004 ; LICENCE: GPLv3    
                      00005 ; DATE: 2012-03-05
                      00006 ; REVISION: 2016-12-31    
                      00007 ; VERSION: 1.1
                      00008 ; 
                      00009 ; GAME:  4 LEDs associated with 4 notes. A sequence of notes must be repeated by
                      00010 ; the player. At success a new note is appended at the end of sequence.
                      00011 ; After 6, 12, 18, 24 and 32 notes success a tune is played. The maximun length of
                      00012 ; sequence is 32 notes. A player that succeed to replay the full 32 notes sequence
                      00013 ; hear the complete victory tune after what the game start over.
                      00014 ; At end of each game the length of sequence is displayed.
                      00015 ; The display work like this:
                      00016 ;  BLUE LED is 25
                      00017 ;  YELLOW LED is 10
                      00018 ;  RED LED is 5
                      00019 ;  GREEN LED is 1
                      00020 ; length=NB*25+NY*10+NR*5+NG
                      00021 ;  where Nx is the number of blink for each color.    
                      00022 ; At first error the game is over and a MCU wait for a new set.
                      00023 ; At power on the MCU run a Power On Self Test, which consist of lighting 
                      00024 ; the 4 LEDs sequencially while sounding the associated note. 
                      00025 ; After POST the 4 LEDs light in loop until the player press a
                      00026 ; button to start game. 
                      00027 ;
                      00028 ; DESCRIPTION: the purpose of this project is to demonstrate the use of a single
                      00029 ; logic I/O to read many switches using a capacitor charging time.
                      00030 ; The game use 4 switches that are all connected  to a resistors ladder. The bottom
                      00031 ; of this ladder is connected to a capacitor and to the GP3 input. The time it take
                      00032 ; for this capacitor to charge to a logic 1 level depend on which button is pressed.    
                      00033 ; Four LEDs of different colour are connected to GP0 and GP1
                      00034 ; The audio output is to GP2
                      00035 ; a PNP small switching transistor is used to drive an 150 ohm speaker
                      00036 ; Another NPN small signal transistor is also connected GP2. This one is used
                      00037 ; to discharge the switches timing capacitor. As the 2 transistors are controlled by
                      00038 ; the same I/O as an inconvinience.    
                      00039 ; The inconvience of this design is that when reading buttons a noise is heard in speaker.
                      00040 ; I consider this to be a small inconvience.
                      00041 ; This design connect 2 LEDs in series from V+ to ground and consequently works only
                      00042 ; with a 3 volt power supply. For a voltage over 3 volt a permanent current path is
                      00043 ; formed through diodes GREEN, RED and YELLOW, BLUE and the LEDs are always ligthed.
                      00044 ; But with a 3 volt power supply it works fine because the conduction voltage of 2 LEDs
                      00045 ; in series in over 3 volts.
                      00046 ; see schematic for detail.
                      00047 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00048 ;This program is free software: you can redistribute it and/or modify
                      00049 ;    it under the terms of the GNU General Public License as published by
                      00050 ;    the Free Software Foundation, either version 3 of the License, or
                      00051 ;    (at your option) any later version.
                      00052 ;
                      00053 ;    This program is distributed in the hope that it will be useful,
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054 ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                      00055 ;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                      00056 ;    GNU General Public License for more details.
                      00057 ;
                      00058 ;    You should have received a copy of the GNU General Public License
                      00059 ;    along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                      00060 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00061     
                      00062     include P10F202.INC
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Nov 17 2016
                      00005 ;  MPASM PIC10F202 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      00151         LIST
                      00063     radix dec
                      00064     
0FFF   0FEB           00065     __config _MCLRE_OFF & _CP_OFF & _WDTE_OFF  ; Watchdog disabled
                      00066                                                ;'master clear' disabled
                      00067                                                ; no code protection
                      00068 
                      00069     errorlevel 2 ; warning disabled
                      00070 
                      00071 ;;;;;;    MCU option mask ;;;;;;;;;;;;;;;;;;;;
                      00072 #define OPTION_MASK B'01000001';bit7=0, wakeup on I/O change
                      00073                                ;bit6=1, pullup disabled
                      00074                                ;bit5=0, timer0 clock -> Fosc/4.
                      00075                                ;bit4=0, 
                      00076                                ;bti3=0, prescale on TIMER0
                      00077                                ;bit2-0=001, prescale 1:4
                      00078                                ;  TIMR0 increment every 4usec.
                      00079 
                      00080 
                      00081 
                      00082 #define RED_GREEN_TRIS   B'1001'
                      00083 #define YELLOW_BLUE_TRIS B'1010'
                      00084 #define RED_GPIO         B'1011'
                      00085 #define GREEN_GPIO       B'1001'
                      00086 #define YELLOW_GPIO      B'1010'
                      00087 #define BLUE_GPIO        B'1001'
                      00088 
                      00089 #define GREEN  0
                      00090 #define RED    1
                      00091 #define YELLOW 2
                      00092 #define BLUE   3
                      00093 
                      00094 #define BTN_GREEN  0
                      00095 #define BTN_RED    1
                      00096 #define BTN_YELLOW 2
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00097 #define BTN_BLUE   3
                      00098 #define BTN_NONE   4
                      00099 
                      00100 ; note for each color
                      00101 #define GREEN_NOTE   B'01000000'
                      00102 #define RED_NOTE B'01000101'
                      00103 #define YELLOW_NOTE    B'01001001'
                      00104 #define BLUE_NOTE  B'01001100'
                      00105 
                      00106 ; values for muical pauses
                      00107 #define THIRTY2TH B'10111111'
                      00108 #define SIXTEENTH B'10011111'
                      00109 #define HEIGHT    B'01111111'
                      00110 #define QUARTER   B'01011111'
                      00111 #define HALF      B'00111111'
                      00112 #define WHOLE     B'00011111'
                      00113 
                      00114 #define AUDIO  GPIO, GP2
                      00115 #define CLAMP GPIO, GP2
                      00116 
                      00117 ; charging time delay
                      00118 ; this is adjusted by testing
                      00119 ; It may vary due to components
                      00120 ; tolerance.
                      00121 ; When pressing RED button if
                      00122 ; GREEN LED turn on increase
                      00123 ; GRN_CNT value.
                      00124 ; On the contrary if YELLOW LED
                      00125 ; turn on decrease GRN_CNT value.                              
                      00126 #define GRN_CNT 20
                      00127 #define RED_CNT 2*GRN_CNT
                      00128 #define YEL_CNT 3*GRN_CNT
                      00129 #define BLUE_CNT 4*GRN_CNT
                      00130 #define TC_MAX 5*GRN_CNT
                      00131 
                      00132 ;;;;;;;;;;;;    MACROS  ;;;;;;;;;;;;;;;;;;;;;;
                      00133 
                      00134 
                      00135 led_off macro
                      00136  movlw B'1011'
                      00137  tris GPIO
                      00138  endm
                      00139 
                      00140 note_off macro
                      00141  bsf AUDIO
                      00142  endm
                      00143 
                      00144 note_on macro
                      00145  bcf AUDIO
                      00146  endm
                      00147 
                      00148 clamp_on macro
                      00149  bsf CLAMP
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00150  endm
                      00151 
                      00152 clamp_off macro
                      00153  bcf CLAMP
                      00154  endm
                      00155 
                      00156 brz macro address  ; branch on zero flag
                      00157  skpnz
                      00158  goto address
                      00159  endm
                      00160 
                      00161 brnz macro address ; branch on not zero flag
                      00162  skpz
                      00163  goto address
                      00164  endm
                      00165 
                      00166 brc macro address ; branch on carry flag
                      00167  skpnc
                      00168  goto address
                      00169  endm
                      00170 
                      00171 brnc macro address ; branch on not carry flag
                      00172  skpc
                      00173  goto address
                      00174  endm
                      00175 
                      00176 skpeq macro var, val ; skip next instruction if variable == val
                      00177   movlw val
                      00178   xorwf var, W
                      00179   skpz
                      00180   endm
                      00181 
                      00182 skpneq macro var, val ; skip next instruction if variable!=val
                      00183  movlw val
                      00184  xorwf var, W
                      00185  skpnz
                      00186  endm
                      00187 
                      00188 
                      00189 ; switch marco
                      00190 switch macro var ; put variable in W for use by following case
                      00191  movfw var
                      00192  endm
                      00193 
                      00194 case macro  n, address  ; go to address if W==n
                      00195  xorlw n
                      00196  brz address
                      00197  xorlw n ; reset W for next case
                      00198  endm
                      00199 
                      00200 
                      00201 loadr16 macro r16, n  ; load r16 with constant
                      00202  local h,l
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00203  h=high n
                      00204  l=low n
                      00205  if l==0
                      00206    clrf r16
                      00207  else
                      00208    movlw low n
                      00209    movwf r16
                      00210  endif
                      00211  if h==0
                      00212    clrf r16+1
                      00213  else
                      00214    movlw h
                      00215    movwf r16+1
                      00216  endif
                      00217  endm
                      00218 
                      00219 ;;;;;;;;;;;;;;;; VARIABLES  ;;;;;;;;;;;;;;;;;;;;;
                      00220     udata
0000                  00221   btn_down res 1  ; which button is down
0001                  00222   led res 1 ; active led value
0002                  00223   delay res 2 ; delay counter used by delay_ms subroutine.
0004                  00224   half_period res 1 ; note half-period delay
0005                  00225   timeout res 2 ; inactivity timeout
0007                  00226   cap_cnt res 1 ; capacitor charge time
0008                  00227   notes_cnt res 1 ; sequence length
0009                  00228   rand res 3 ; pseudo random number generator register
000C                  00229   tune_array res 8 ; note sequence array maximun 32 notes. 2 bits used per note.
0014                  00230   t0 res 1 ; temporary storage
0015                  00231   t1 res 1 
0016                  00232   t2 res 1
0017                  00233   t3 res 1
                      00234 
                      00235   code 
                      00236 ;;;;;;;;;;;;;;;;;;; CODE SEGMENT ;;;;;;;;;;;;;;;;;;
                      00237     org 0
0000   0A??           00238  goto init
                      00239 
                      00240 ;;;;;;;;;;    delay_ms  ;;;;;;;;;;;;;;;;;;
                      00241 ; delay in miliseconds
                      00242 ; delay = value in msec
                      00243 #define delayH delay+1
0001                  00244 delay_ms:
0001   0C07           00245  movlw .7
0002   0021           00246  movwf TMR0
0003   0201           00247  movfw TMR0
0004   0743           00248  skpz
0005   0A??           00249  goto $-2
0006   0C01           00250  movlw 1
0007   00??           00251  subwf delay,F
0008   0703           00252  skpc
0009   00??           00253  subwf delayH,F
000A   0603           00254  skpnc
000B   0A??           00255  goto delay_ms
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000C   0800           00256  return
                      00257  
                      00258 
000D                  00259 pause_table: ; pause length in milliseconds
000D   01E2           00260  addwf PCL, F
000E   08D0           00261  dt low .2000   ;1
000F   0807           00262  dt high .2000
0010   08E8           00263  dt low .1000    ;1/2
0011   0803           00264  dt high .1000
0012   08F4           00265  dt low .500    ;1/4
0013   0801           00266  dt high .500
0014   08FA           00267  dt low .250     ;1/8
0015   0800           00268  dt high .250
0016   087D           00269  dt low .125    ;1/16
0017   0800           00270  dt high .125
0018   0840           00271  dt low .64     ;1/32
0019   0800           00272  dt high .64
                      00273 
001A                  00274 translate_table: ;translate button to corresponding note
001A   01E2           00275  addwf PCL, F
001B   0840           00276  dt GREEN_NOTE
001C   0845           00277  dt RED_NOTE
001D   0849           00278  dt YELLOW_NOTE
001E   084C           00279  dt BLUE_NOTE
                      00280 
001F                  00281 note_table: ; tempered scale
001F   01E2           00282  addwf PCL, F
0020   08FE           00283  dt .254  ; G3     blue note (0)
0021   08F0           00284  dt .240  ; G#3
0022   08E2           00285  dt .226  ; A3
0023   08D6           00286  dt .214  ; A#3
0024   08C9           00287  dt .201  ; B3
0025   08BE           00288  dt .190  ; C4     yellow note (5)
0026   08B3           00289  dt .179  ; C#4
0027   08A9           00290  dt .169  ; D4
0028   08A0           00291  dt .160  ; D#4
0029   0897           00292  dt .151  ; E4     red note (9)
002A   088E           00293  dt .142  ; F4
002B   0886           00294  dt .134  ; F#4
002C   087F           00295  dt .127  ; G4     green note (12)
002D   0877           00296  dt .119  ; G#4
002E   0871           00297  dt .113  ; A4
002F   086A           00298  dt .106  ; A#4
0030   0864           00299  dt .100  ; B4
0031   085F           00300  dt .95   ; C5
0032   0859           00301  dt .89   ; C#5
0033   0854           00302  dt .84   ; D5
0034   084F           00303  dt .79   ; D#5
0035   084B           00304  dt .75   ; E5
0036   0847           00305  dt .71   ; F5
0037   0843           00306  dt .67   ; F#5
0038   083F           00307  dt .63   ; G5
                      00308 
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00309 ; rocky 1 movie theme 
0039                  00310 rocky_theme:
0039   01E2           00311  addwf PCL,F
003A   0889           00312  dt B'10001001' ; 16e
003B   086B           00313  dt B'01101011' ; 8g
003C   089F           00314  dt B'10011111' ; 16p
003D   082E           00315  dt B'00101110' ; 2a
003E   087F           00316  dt B'01111111' ; 8p
003F   088E           00317  dt B'10001110' ; 16a
0040   0870           00318  dt B'01110000' ; 8b
0041   089F           00319  dt B'10011111' ; 16p
0042   0829           00320  dt B'00101001' ; 2e
0043   089F           00321  dt B'10011111' ; 16p
0044   08BF           00322  dt B'10111111' ; 32p
0045   0889           00323  dt B'10001001' ; 16e
0046   086B           00324  dt B'01101011' ; 8g
0047   089F           00325  dt B'10011111' ; 16p
0048   082E           00326  dt B'00101110' ; 2a
0049   089F           00327  dt B'10011111' ; 16p
004A   08BF           00328  dt B'10111111' ; 32p
004B   088E           00329  dt B'10001110' ; 16a
004C   0870           00330  dt B'01110000' ; 8b
004D   089F           00331  dt B'10011111' ; 16p
004E   0809           00332  dt B'00001001' ; 1e
004F   087F           00333  dt B'01111111' ; 8p
0050   089F           00334  dt B'10011111' ; 16p
0051   0887           00335  dt B'10000111' ; 16d4
0052   0885           00336  dt B'10000101' ; 16c4
0053   0867           00337  dt B'01100111' ; 8d4
0054   089F           00338  dt B'10011111' ; 16p
0055   0891           00339  dt B'10010001' ; 16c5
0056   0893           00340  dt B'10010011' ; 16d5
0057   0855           00341  dt B'01010101' ; 4e5
0058   085F           00342  dt B'01011111' ; 4p
0059   0891           00343  dt B'10010001' ; 16c5
005A   0891           00344  dt B'10010001' ; 16c5
005B   0870           00345  dt B'01110000' ; 8b
005C   0890           00346  dt B'10010000' ; 16b
005D   086E           00347  dt B'01101110' ; 8a
005E   088E           00348  dt B'10001110' ; 16a
005F   084B           00349  dt B'01001011' ; 4g
0060   0876           00350  dt B'01110110' ; 8f5
0061   0815           00351  dt B'00010101' ; 1e5
                      00352 
                      00353 
                      00354 
                      00355  ; led GPIO value for each led
0062                  00356 led_gpio_table:
0062   01E2           00357  addwf PCL,F
0063   0809           00358  dt GREEN_GPIO
0064   080B           00359  dt RED_GPIO
0065   080A           00360  dt YELLOW_GPIO
0066   0809           00361  dt BLUE_GPIO
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00362  
                      00363 ; TRIS value for each led
0067                  00364 led_tris_table: 
0067   01E2           00365  addwf PCL,F
0068   0809           00366  dt RED_GREEN_TRIS
0069   0809           00367  dt RED_GREEN_TRIS
006A   080A           00368  dt YELLOW_BLUE_TRIS
006B   080A           00369  dt YELLOW_BLUE_TRIS
                      00370 
                      00371 ;;;;;;;  led_on  ;;;;;;;
                      00372 ;; light LED  
                      00373 ;; input: 
                      00374 ;;   variable 'led' 
                      00375 ;;   is LED identifier
                      00376 ;;;;;;;;;;;;;;;;;;;;;;;; 
006C                  00377 led_on:
006C   02??           00378  movfw led
006D   09??           00379  call led_gpio_table
006E   0026           00380  movwf GPIO
006F   02??           00381  movfw led
0070   09??           00382  call led_tris_table
0071   0006           00383  tris GPIO
0072   0800           00384  return
                      00385 
                      00386 
                      00387 ;;;;;;;;;;;;;;;;;  read_buttons ;;;;;;;;;;;
                      00388 ;; read GP3 
                      00389 ;; when GP3 == 1
                      00390 ;; check  cap_cnt to identify button
                      00391 ;; WORKING:
                      00392 ;;   first the clamp is released on 'C3'
                      00393 ;;   charging capacitor.
                      00394 ;;   then variable 'cap_cnt' is incremented
                      00395 ;;   until GP3 read as '1'.
                      00396 ;;   The final value of 'cap_cnt' determine
                      00397 ;;   if a button is down and which one. 
                      00398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
0073                  00399 read_buttons:
0073   00??           00400   clrf btn_down
0074   00??           00401   clrf cap_cnt
                      00402   clamp_off ; capacitor start charging.
0075   0446               M  bcf CLAMP
0076                  00403 rbtn1: ; charging counter loop
0076   0666           00404   btfsc GPIO, GP3
0077   0A??           00405   goto rbtn3
0078   02??           00406   incf cap_cnt,F
0079   0C64           00407   movlw TC_MAX  ; charging timout
007A   00??           00408   subwf cap_cnt, W
007B   0703           00409   skpc
007C   0A??           00410   goto rbtn1
007D   0C04           00411   movlw BTN_NONE ; charging time too long,
007E   00??           00412   movwf btn_down ; assume no button down.
                      00413   clamp_on
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

007F   0546               M  bsf CLAMP
0080   0800           00414   return
0081                  00415 rbtn3 ; check cap_cnt value to identify button
                      00416   clamp_on ; keep 'C3' discharge when not reading.
0081   0546               M  bsf CLAMP
0082   0C14           00417   movlw GRN_CNT
0083   00??           00418   subwf cap_cnt, W
0084   0703           00419   skpc
0085   0800           00420   return  ; BTN_GREEN
0086   02??           00421   incf btn_down,F
0087   0C28           00422   movlw RED_CNT
0088   00??           00423   subwf cap_cnt, W
0089   0703           00424   skpc
008A   0800           00425   return ; BTN_RED
008B   02??           00426   incf btn_down,F
008C   0C3C           00427   movlw YEL_CNT
008D   00??           00428   subwf cap_cnt, W
008E   0703           00429   skpc
008F   0800           00430   return ; BTN_YELLOW
0090   02??           00431   incf btn_down,F ; BTN_BLUE
0091   0C50           00432   movlw BLUE_CNT
0092   00??           00433   subwf cap_cnt,W
0093   0603           00434   skpnc
0094   02??           00435   incf btn_down,f ; BTN_NONE
0095   0800           00436   return 
                      00437 
                      00438 ;;;;;; store_note  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00439 ;;; store note in tune_array
                      00440 ;;; inputs:
                      00441 ;;;     t0= array index where to store note {0-31}
                      00442 ;;;     t1=note  {0-3} stored as 2 bits value.
                      00443 ;;; This one is a little tricky because each byte is split in 4 slots of
                      00444 ;;; 2 bits. The position in tune_array is index/4 and the slot is the remainder.  
                      00445 ;;; So there is 4 notes per byte. The note must be stored in the good slot without
                      00446 ;;; altering the contain of others slots.
                      00447 ;;;  bits:  76|54|32|10  
                      00448 ;;;  slots: s3|s2|s1|s0  
                      00449 ;;; To get that result a AND mask is create to reset the slot to 0 and the OR
                      00450 ;;; operation is used to insert the note in the slot.  
                      00451 ;;; exemple: say the index is 6 and the note is 1. then
                      00452 ;;; byte order is 6/4=1
                      00453 ;;; slot is 6 % 4 = 2
                      00454 ;;;  AND mask is 0b11001111
                      00455 ;;                   ^^ slot 2 will be set to 0 after AND operation     
                      00456 ;;;  OR mask is 0b00010000 
                      00457 ;;;                 ^^  slot 2 will be set to 1 after OR operation
                      00458 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
0096                  00459 store_note:
                      00460 ;initialize array pointer    
0096   0C??           00461  movlw tune_array
0097   0024           00462  movwf FSR
                      00463 ; extract the byte order and put in t2 
0098   0CFC           00464  movlw 0xFC
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0099   01??           00465  andwf t0,W  ; mask out 2 least significant bits 
009A   00??           00466  movwf t2 ; and put the value in t2
                      00467 ; divide by 4
009B   0403           00468  bcf STATUS, C  
009C   03??           00469  rrf t2,F
009D   03??           00470  rrf t2,F
009E   02??           00471  movfw t2
009F   01E4           00472  addwf FSR, F ; FSR=tune_array+index/4
                      00473 ; create AND mask and shift note is right slot
00A0   0C03           00474  movlw 3
00A1   01??           00475  andwf t1,F ; all bits to 0 except bits 0,1
00A2   00??           00476  movwf t2   ; 3->t2
00A3   01??           00477  andwf t0,W   ; get slot number
00A4   00??           00478  subwf t2,F   ; how many times to shift left.
                      00479 ;create the AND mask
00A5   0CFC           00480  movlw 0xFC
00A6   00??           00481  movwf t0
00A7                  00482 store_note1:
                      00483 ; shift left AND mask and note value
                      00484 ; while shift counter not zero. 
                      00485  brnz shift_left_slot
00A7   0743               M  skpz
00A8   0A??               M  goto shift_left_slot
                      00486 ; the shifting is done, store note in slot. 
00A9   02??           00487  movfw t0  ; AND mask
00AA   0160           00488  andwf INDF,F ; reset that slot to 0
00AB   02??           00489  movfw t1 ; note to W
00AC   0120           00490  iorwf INDF,F ; insert note in slot
00AD   0800           00491  return
00AE                  00492 shift_left_slot: 
                      00493 ;; shift left mask 1 slot 
00AE   0403           00494  bcf STATUS, C
00AF   03??           00495  rlf t1,F
00B0   03??           00496  rlf t1,F
                      00497 ;; shift left note 1 slot 
00B1   0503           00498  bsf STATUS,C 
00B2   03??           00499  rlf t0,F
00B3   03??           00500  rlf t0,F
00B4   00??           00501  decf t2,F
00B5   0A??           00502  goto store_note1
                      00503 
                      00504 ;;;;;;  load_note  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00505 ;;; get note from tune_array and put it in W 
                      00506 ;;; input: W is array index  {0-31}
                      00507 ;;; output: t1 note {0-3}
                      00508 ;;; byte_order is index/4
                      00509 ;;; slot is index % 4
                      00510 ;;; AND mask is inverse of that store_note
                      00511 ;;; because to read a slot we want to keep the
                      00512 ;;; contain of the slot and zero all other bits.
                      00513 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
00B6                  00514 load_note:
00B6   00??           00515  movwf t0 ; save index
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00516 ; set array pointer
00B7   0C??           00517  movlw tune_array
00B8   0024           00518  movwf FSR
00B9   0CFC           00519  movlw 0xFC
00BA   01??           00520  andwf t0,W
00BB   00??           00521  movwf t1
                      00522 ; divide index by 4 
00BC   0403           00523  bcf STATUS,C
00BD   03??           00524  rrf t1,F
00BE   03??           00525  rrf t1,W
00BF   01E4           00526  addwf FSR,F  ; FSR=tune_array+index/4
00C0   0200           00527  movfw INDF   ; get the byte containing the note slot
00C1   00??           00528  movwf t1 ; save it in t1
00C2   0C03           00529  movlw 3
00C3   00??           00530  movwf t2 ; the AND mask 
00C4   01??           00531  andwf t0,W ; slot number index % 4 same as 2 least significant bits.
00C5   00??           00532  subwf t2,F ; how many times t1 mus be shifted right to put the slot in bits 1:0
00C6                  00533 load_note1:
                      00534 ; first shift right until the slot is in bits 1:0
                      00535  brnz rotate_right_twice
00C6   0743               M  skpz
00C7   0A??               M  goto rotate_right_twice
                      00536 ; shifting done keep bits 1:0
                      00537 ; and mask all other to zero.
00C8   0C03           00538  movlw 3
00C9   01??           00539  andwf t1,F  ; W=note
00CA   0800           00540  return
                      00541 ; slot shifted right 1 position 
00CB                  00542 rotate_right_twice:
00CB   03??           00543  rrf t1,F
00CC   03??           00544  rrf t1,F
00CD   00??           00545  decf t2,F
00CE   0A??           00546  goto load_note1
                      00547 
                      00548 
                      00549 ;;;;;;;;;  random  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00550 ;; pseudo random number generator
                      00551 ;; 24 bits linear feedback shift register 
                      00552 ;; REF: http://en.wikipedia.org/wiki/Linear_feedback_shift_register
                      00553 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00CF                  00554 random:  
00CF   0403           00555   bcf STATUS, C
00D0   03??           00556   rrf rand+2,F
00D1   03??           00557   rrf rand+1,F
00D2   03??           00558   rrf rand,F
00D3   0703           00559   skpc
00D4   0800           00560   return
00D5   0CE1           00561   movlw 0xE1
00D6   01??           00562   xorwf rand+2, F
00D7   0800           00563   return
                      00564 
                      00565 ;;;;;;;;;;   wait_btn_release  ;;;;;
                      00566 ;; repeatedly read buttons until 
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00567 ;; until it return BTN_NONE
                      00568 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
00D8                  00569 wait_btn_release:
00D8   09??           00570  call read_buttons
                      00571  skpeq btn_down, BTN_NONE
00D9   0C04               M   movlw 4
00DA   01??               M   xorwf btn_down, W
00DB   0743               M   skpz
00DC   0A??           00572  goto wait_btn_release
00DD   0800           00573  return
                      00574 
                      00575 
                      00576 ;;;;;;;;;;;;; note  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00577 ; play a musical note from tempered scale. 
                      00578 ; input:
                      00579 ;  w = note : encoding  bits 0-4 notes, note 0x1F=pause , bits 5-7 timelapse
                      00580 ; WORKING:
                      00581 ;  This subroutine is cycle counted.
                      00582 ;  Tones period are based on Tcy=1uSec
                      00583 ;  Each path in half-cycle loop is 10 Tcy.
                      00584 ;  Frequencies values are computed based on this 10 Tcy.
                      00585 ;  Any change on this code will alter the frequencies. 
                      00586 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
00DE                  00587 note:
00DE   00??           00588  movwf t0
00DF   0C1F           00589  movlw 0x1F
00E0   01??           00590  andwf t0,W
00E1   0F1F           00591  xorlw 0x1F
                      00592  brz pause
00E2   0643               M  skpnz
00E3   0A??               M  goto pause
                      00593  loadr16 delay, 0x0D40
  0000                    M  local h,l
  0000000D                M  h=high 0x0D40
  00000040                M  l=low 0x0D40
                          M  if l==0
                          M    clrf delay
                          M  else
00E4   0C40               M    movlw low 0x0D40
00E5   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
00E6   0C0D               M    movlw h
00E7   00??               M    movwf delay+1
                          M  endif
00E8   0C03           00594  movlw 3
00E9   00??           00595  movwf timeout
00EA   0CE0           00596  movlw 0xE0
00EB   01??           00597  andwf t0,W
00EC   00??           00598  movwf t1
00ED   03??           00599  swapf t1,F
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00EE   03??           00600  rrf t1,F
00EF   02??           00601  movf t1,F
                      00602  brz note02
00F0   0643               M  skpnz
00F1   0A??               M  goto note02
00F2                  00603 note01:
00F2   0403           00604  bcf STATUS,C
00F3   03??           00605  rrf timeout
00F4   03??           00606  rrf delay+1,F
00F5   03??           00607  rrf delay,F
00F6   02??           00608  decfsz t1
00F7   0A??           00609  goto note01
00F8                  00610 note02:
00F8   0C1F           00611  movlw 0x1F
00F9   01??           00612  andwf t0,W
00FA   09??           00613  call note_table
00FB   00??           00614  movwf half_period
00FC                  00615 note1:
00FC   0C04           00616  movlw B'0100'
00FD   01A6           00617  xorwf GPIO, F  ; toggle output pin
00FE   02??           00618  movfw half_period
00FF   00??           00619  movwf t0
0100                  00620 note2:
0100   00??           00621  decf delay,F
0101   02??           00622  comf delay,W
0102   0743           00623  skpz
0103   0A??           00624  goto note3
0104   00??           00625  decf delay+1,F
0105   02??           00626  comf delay+1,W
0106   0743           00627  skpz
0107   0A??           00628  goto note4  ; to get 10 Tcy in this path must goto note4
0108   00??           00629  decf timeout,F
0109   02??           00630  comf timeout,W
010A   0643           00631  skpnz
010B   0A??           00632  goto note5
010C                  00633 note3:
010C   0A??           00634  goto $+1
010D                  00635 note4:
010D   02??           00636  decfsz t0
010E   0A??           00637  goto note2  ; half-cycle loop
010F   0A??           00638  goto note1 ; half-cycle completed
0110                  00639 note5:
                      00640  clamp_on
0110   0546               M  bsf CLAMP
0111   0800           00641  return
                      00642 
                      00643 ;;;;; musical pause ;;;;;;;;;;;;;;
                      00644 ;; when note value is 0x1F
                      00645 ;; tone subroutine branch here.
                      00646 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
0112                  00647 pause: ;musical pause
0112   03??           00648  swapf t0, F
0113   0C0E           00649  movlw 0xE
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0114   01??           00650  andwf t0,F
0115   02??           00651  movfw t0
0116   09??           00652  call pause_table
0117   00??           00653  movwf delay
0118   02??           00654  incf t0,W
0119   09??           00655  call pause_table
011A   00??           00656  movwf delay+1
011B   09??           00657  call delay_ms
011C   0800           00658  return
                      00659 
                      00660 
                      00661     
                      00662 ;;;;;;;;;;;;;;;  INITIALIZATION CODE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00663  ; hardware initialization
011D                  00664 init:
011D   0C41           00665  movlw OPTION_MASK
011E   0002           00666  option 
                      00667  led_off
011F   0C0B               M  movlw B'1011'
0120   0006               M  tris GPIO
0121   00??           00668  clrf notes_cnt
0122   0CA5           00669  movlw 0xA5
0123   00??           00670  movwf rand
                      00671  clamp_on
0124   0546               M  bsf CLAMP
                      00672 
                      00673 ;;;;;;;;;;;;;;;;;;;;;;;;  MAIN PROCEDURE  ;;;;;;;;;;;;;;;;;;;;;
                      00674 ; the biggest share of the code is here
                      00675 ; because subroutine calls are limited to 2 levels
                      00676 ; It use a lot of goto instead of call.
                      00677 ; I like to factor code in many subroutines that neast each others
                      00678 ; but this is not possible with this MCU.
                      00679 ; Here is spaghetti code for your degustation (or disgustation), MCU obliged. 
                      00680 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
0125                  00681 main:
                      00682 ;;;;;;;;;;;;;;;;;;;;;;;;
                      00683 ;; power on self test
                      00684 ;; light each LED in sequence
                      00685 ;; with associated tone.
                      00686 ;;;;;;;;;;;;;;;;;;;;;;;; 
0125   00??           00687  clrf led
0126                  00688 post:
0126   09??           00689  call led_on
0127   02??           00690  movfw led
0128   09??           00691  call translate_table
0129   09??           00692  call note
012A   02??           00693  incf led,F
012B   0740           00694  btfss led, 2
012C   0A??           00695  goto post
                      00696  led_off
012D   0C0B               M  movlw B'1011'
012E   0006               M  tris GPIO
012F   09??           00697  call wait_btn_release
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0130                  00698 next_set:
0130   00??           00699  clrf led
0131   0C86           00700  movlw .134
0132   00??           00701  movwf timeout
                      00702 ; wait for a button down to start game
                      00703 ; light LEDs in sequence
                      00704 ;until a button is pressed down or timeout occur 
0133                  00705 led_sweep:
0133   02??           00706  decfsz timeout,F
0134   0A??           00707  goto keep_going
0135   0A??           00708  goto init  ; after about 35 seconds of idle time, reset.
0136                  00709 keep_going: 
0136   09??           00710  call led_on
                      00711  loadr16 delay, .250
  0000                    M  local h,l
  00000000                M  h=high .250
  000000FA                M  l=low .250
                          M  if l==0
                          M    clrf delay
                          M  else
0137   0CFA               M    movlw low .250
0138   00??               M    movwf delay
                          M  endif
                          M  if h==0
0139   00??               M    clrf delay+1
                          M  else
                          M    movlw h
                          M    movwf delay+1
                          M  endif
013A   09??           00712  call delay_ms
013B   02??           00713  incf led,F
013C   0C03           00714  movlw 3
013D   01??           00715  andwf led,F
013E   09??           00716  call read_buttons
                      00717  skpneq btn_down, BTN_NONE
013F   0C04               M  movlw 4
0140   01??               M  xorwf btn_down, W
0141   0643               M  skpnz
0142   0A??           00718  goto led_sweep
                      00719  led_off
0143   0C0B               M  movlw B'1011'
0144   0006               M  tris GPIO
0145   02??           00720  movfw timeout
0146   00??           00721  movwf rand
0147   09??           00722  call wait_btn_release
                      00723  loadr16 delay, .500
  0000                    M  local h,l
  00000001                M  h=high .500
  000000F4                M  l=low .500
                          M  if l==0
                          M    clrf delay
                          M  else
0148   0CF4               M    movlw low .500
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0149   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
014A   0C01               M    movlw h
014B   00??               M    movwf delay+1
                          M  endif
014C   09??           00724  call delay_ms
                      00725 ; game loop.
014D                  00726 play_rand:
014D   02??           00727  movfw notes_cnt
014E   00??           00728  movwf t0
014F   02??           00729  incf notes_cnt,F
                      00730 ; add a random value to sequence 
0150   09??           00731  call random
0151   02??           00732  movfw rand+2
0152   01??           00733  xorwf rand+1,W
0153   01??           00734  xorwf rand,W
0154   0E03           00735  andlw 3
0155   00??           00736  movwf t1
0156   09??           00737  call store_note
0157   00??           00738  clrf t3 ; notes counter
                      00739 ; play sequence loop 
0158                  00740 play_rand02:
0158   02??           00741  movfw t3
0159   09??           00742  call load_note
015A   02??           00743  movfw t1
015B   00??           00744  movwf led
015C   09??           00745  call led_on
015D   02??           00746  movfw led
015E   09??           00747  call translate_table
015F   09??           00748  call note
                      00749  led_off
0160   0C0B               M  movlw B'1011'
0161   0006               M  tris GPIO
                      00750  loadr16 delay, .100
  0000                    M  local h,l
  00000000                M  h=high .100
  00000064                M  l=low .100
                          M  if l==0
                          M    clrf delay
                          M  else
0162   0C64               M    movlw low .100
0163   00??               M    movwf delay
                          M  endif
                          M  if h==0
0164   00??               M    clrf delay+1
                          M  else
                          M    movlw h
                          M    movwf delay+1
                          M  endif
0165   09??           00751  call delay_ms ; 1/10 second pause
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0166   02??           00752  incf t3,F
0167   02??           00753  movfw notes_cnt
0168   00??           00754  subwf t3,W
0169   0743           00755  skpz
016A   0A??           00756  goto play_rand02
                      00757 ; wait player playing sequence back
016B                  00758 wait_playback:
016B   00??           00759  clrf t3 ; notes counter
016C                  00760 wait01:
016C   0CFA           00761  movlw .250   ; maximun delay between each button 250 msec.
016D   00??           00762  movwf timeout
016E                  00763 wait02: ; wait button loop
                      00764  loadr16 delay, .20
  0000                    M  local h,l
  00000000                M  h=high .20
  00000014                M  l=low .20
                          M  if l==0
                          M    clrf delay
                          M  else
016E   0C14               M    movlw low .20
016F   00??               M    movwf delay
                          M  endif
                          M  if h==0
0170   00??               M    clrf delay+1
                          M  else
                          M    movlw h
                          M    movwf delay+1
                          M  endif
0171   09??           00765  call delay_ms
0172   02??           00766  movfw timeout
0173   00??           00767  movwf rand
0174   00??           00768  decf timeout,F
0175   0643           00769  skpnz
0176   0A??           00770  goto game_over
0177   09??           00771  call read_buttons
                      00772  skpneq btn_down, BTN_NONE
0178   0C04               M  movlw 4
0179   01??               M  xorwf btn_down, W
017A   0643               M  skpnz
017B   0A??           00773  goto wait02
                      00774  loadr16 delay, .10  ; wait 10 msec before buttons
  0000                    M  local h,l
  00000000                M  h=high .10
  0000000A                M  l=low .10
                          M  if l==0
                          M    clrf delay
                          M  else
017C   0C0A               M    movlw low .10
017D   00??               M    movwf delay
                          M  endif
                          M  if h==0
017E   00??               M    clrf delay+1
                          M  else
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M    movlw h
                          M    movwf delay+1
                          M  endif
017F   09??           00775  call delay_ms       ; debouncing
0180   09??           00776  call read_buttons
                      00777  skpneq btn_down, BTN_NONE
0181   0C04               M  movlw 4
0182   01??               M  xorwf btn_down, W
0183   0643               M  skpnz
0184   0A??           00778  goto wait01 ; no button down
                      00779 ; light LED and play tone corresponding to that button
0185   02??           00780  movfw btn_down
0186   00??           00781  movwf led
0187   09??           00782  call led_on
0188   02??           00783  movfw led
0189   09??           00784  call translate_table
018A   09??           00785  call note
                      00786  led_off
018B   0C0B               M  movlw B'1011'
018C   0006               M  tris GPIO
018D   09??           00787  call wait_btn_release
018E   02??           00788  movfw t3
018F   09??           00789  call load_note
0190   02??           00790  movfw led
0191   00??           00791  subwf t1
0192   0743           00792  skpz
0193   0A??           00793  goto game_over ; not the good one
0194   02??           00794  incf t3,F
0195   02??           00795  movfw notes_cnt
0196   00??           00796  subwf t3,W
0197   0743           00797  skpz
0198   0A??           00798  goto wait01 ; loop to wait for next button
0199                  00799 playback_success
                      00800 ; to understand this 'switch' and 'case'
                      00801 ; machanism see macros above. 
                      00802  switch notes_cnt
0199   02??               M  movfw notes_cnt
                      00803  case .6, victory
019A   0F06               M  xorlw .6
                          M  brz victory
019B   0643               M  skpnz
019C   0A??               M  goto victory
019D   0F06               M  xorlw .6 ; reset W for next case
                      00804  case .12, victory
019E   0F0C               M  xorlw .12
                          M  brz victory
019F   0643               M  skpnz
01A0   0A??               M  goto victory
01A1   0F0C               M  xorlw .12 ; reset W for next case
                      00805  case .18, victory
01A2   0F12               M  xorlw .18
                          M  brz victory
01A3   0643               M  skpnz
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01A4   0A??               M  goto victory
01A5   0F12               M  xorlw .18 ; reset W for next case
                      00806  case .24, victory
01A6   0F18               M  xorlw .24
                          M  brz victory
01A7   0643               M  skpnz
01A8   0A??               M  goto victory
01A9   0F18               M  xorlw .24 ; reset W for next case
                      00807  case .32, victory_final
01AA   0F20               M  xorlw .32
                          M  brz victory_final
01AB   0643               M  skpnz
01AC   0A??               M  goto victory_final
01AD   0F20               M  xorlw .32 ; reset W for next case
                      00808  loadr16 delay, .500
  0000                    M  local h,l
  00000001                M  h=high .500
  000000F4                M  l=low .500
                          M  if l==0
                          M    clrf delay
                          M  else
01AE   0CF4               M    movlw low .500
01AF   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
01B0   0C01               M    movlw h
01B1   00??               M    movwf delay+1
                          M  endif
                      00809 ; this the default case 
01B2   09??           00810  call delay_ms
01B3   0A??           00811  goto play_rand
                      00812 ; play rocky_theme at 6,12,18,24 and 32 length success.
                      00813 ; more notes of the theme are played at each milestone.
                      00814 ; If player get at maximum sequence length (i.e. 32)
                      00815 ; the theme is played to end. 
01B4                  00816 victory:
01B4   02??           00817  movfw notes_cnt
01B5   0A??           00818  goto play_victory_theme
                      00819 ; play complete rocky theme.
01B6                  00820 victory_final:
01B6   00??           00821  clrf notes_cnt
01B7   0C28           00822  movlw .40
01B8                  00823 play_victory_theme:
01B8   00??           00824  movwf t2
01B9   00??           00825  clrf t3
01BA                  00826 prt01:
01BA   02??           00827  movfw t3
01BB   09??           00828  call rocky_theme
01BC   09??           00829  call note
01BD   02??           00830  incf t3,F
01BE   02??           00831  movfw t2
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01BF   00??           00832  subwf t3,W
01C0   0743           00833  skpz
01C1   0A??           00834  goto prt01
                      00835  loadr16 delay, 0x400
  0000                    M  local h,l
  00000004                M  h=high 0x400
  00000000                M  l=low 0x400
                          M  if l==0
01C2   00??               M    clrf delay
                          M  else
                          M    movlw low 0x400
                          M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
01C3   0C04               M    movlw h
01C4   00??               M    movwf delay+1
                          M  endif
01C5   09??           00836  call delay_ms
01C6   0C20           00837  movlw 32
01C7   01??           00838  xorwf notes_cnt,W
01C8   0743           00839  skpz
01C9   0A??           00840  goto play_rand
01CA   0A??           00841  goto init
                      00842  
                      00843 ; player failed to repeat sequence
01CB                  00844 game_over:
01CB   0C58           00845  movlw B'01011000'
01CC   09??           00846  call note ; audio alert game over
                      00847 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00848 ;; display sequence length
                      00849 ;; BLUE is 25
                      00850 ;; YELLOW is 10
                      00851 ;; RED is 5
                      00852 ;; GREEN is 1
                      00853 ;; length=NB*25+NY*10+NR*5+NG
                      00854 ;; where Nx is number of blink of
                      00855 ;; each LED.
                      00856 ;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                      00857 #define len notes_cnt
01CD   00??           00858  decf len,F
01CE                  00859 display_length:
01CE   02??           00860  movf len,F
01CF   0643           00861  skpnz
01D0   0A??           00862  goto wait1sec
01D1   0C03           00863  movlw 3
01D2   00??           00864  movwf led
01D3   0C19           00865  movlw .25
01D4   00??           00866  subwf len,W
01D5   0703           00867  skpc
01D6   0A??           00868  goto lt25 ; <25
01D7   00??           00869  movwf len
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01D8   0A??           00870  goto blink_led
01D9                  00871 lt25:
01D9   00??           00872  decf led,F
01DA   0C0A           00873  movlw .10
01DB   00??           00874  subwf len,W
01DC   0703           00875  skpc
01DD   0A??           00876  goto lt10; <10
01DE   00??           00877  movwf len
01DF   0A??           00878  goto blink_led
01E0                  00879 lt10:
01E0   00??           00880  decf led,F
01E1   0C05           00881  movlw .5
01E2   00??           00882  subwf len,W
01E3   0703           00883  skpc
01E4   0A??           00884  goto lt5 ; <5
01E5   00??           00885  movwf len
01E6   0A??           00886  goto blink_led
01E7                  00887 lt5:
01E7   00??           00888  decf led,F
01E8   00??           00889  decf len,F
01E9                  00890 blink_led:
01E9   09??           00891  call led_on
                      00892  loadr16 delay, .500
  0000                    M  local h,l
  00000001                M  h=high .500
  000000F4                M  l=low .500
                          M  if l==0
                          M    clrf delay
                          M  else
01EA   0CF4               M    movlw low .500
01EB   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
01EC   0C01               M    movlw h
01ED   00??               M    movwf delay+1
                          M  endif
01EE   09??           00893  call delay_ms ; 500 msec pause
                      00894  led_off
01EF   0C0B               M  movlw B'1011'
01F0   0006               M  tris GPIO
                      00895  loadr16 delay, .500
  0000                    M  local h,l
  00000001                M  h=high .500
  000000F4                M  l=low .500
                          M  if l==0
                          M    clrf delay
                          M  else
01F1   0CF4               M    movlw low .500
01F2   00??               M    movwf delay
                          M  endif
                          M  if h==0
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M    clrf delay+1
                          M  else
01F3   0C01               M    movlw h
01F4   00??               M    movwf delay+1
                          M  endif
01F5   09??           00896  call delay_ms ; 500 msec pause
01F6   0A??           00897  goto display_length
                      00898 ;wait 1 second before resuming
                      00899 ;to next_set 
01F7                  00900 wait1sec:
                      00901  loadr16 delay, .1000
  0000                    M  local h,l
  00000003                M  h=high .1000
  000000E8                M  l=low .1000
                          M  if l==0
                          M    clrf delay
                          M  else
01F7   0CE8               M    movlw low .1000
01F8   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
01F9   0C03               M    movlw h
01FA   00??               M    movwf delay+1
                          M  endif
01FB   09??           00902  call delay_ms
01FC   0A??           00903  goto next_set
                      00904  
0FEB                  00905  end
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE 23


SYMBOL TABLE
  LABEL                             VALUE 

AUDIO                             GPIO, GP2
BLUE                              3
BLUE_CNT                          4*GRN_CNT
BLUE_GPIO                         B'1001'
BLUE_NOTE                         B'01001100'
BTN_BLUE                          3
BTN_GREEN                         0
BTN_NONE                          4
BTN_RED                           1
BTN_YELLOW                        2
C                                 00000000
CAL0                              00000001
CAL1                              00000002
CAL2                              00000003
CAL3                              00000004
CAL4                              00000005
CAL5                              00000006
CAL6                              00000007
CLAMP                             GPIO, GP2
DC                                00000001
F                                 00000001
FOSC4                             00000000
FSR                               00000004
GP0                               00000000
GP1                               00000001
GP2                               00000002
GP3                               00000003
GPIO                              00000006
GPWUF                             00000007
GREEN                             0
GREEN_GPIO                        B'1001'
GREEN_NOTE                        B'01000000'
GRN_CNT                           20
HALF                              B'00111111'
HEIGHT                            B'01111111'
INDF                              00000000
NOT_GPPU                          00000006
NOT_GPWU                          00000007
NOT_PD                            00000003
NOT_TO                            00000004
OPTION_MASK                       B'01000001'
OSCCAL                            00000005
PCL                               00000002
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
QUARTER                           B'01011111'
RED                               1
RED_CNT                           2*GRN_CNT
RED_GPIO                          B'1011'
RED_GREEN_TRIS                    B'1001'
RED_NOTE                          B'01000101'
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE 24


SYMBOL TABLE
  LABEL                             VALUE 

SIXTEENTH                         B'10011111'
STATUS                            00000003
T0CS                              00000005
T0SE                              00000004
TC_MAX                            5*GRN_CNT
THIRTY2TH                         B'10111111'
TMR0                              00000001
TRISIO0                           00000000
TRISIO1                           00000001
TRISIO2                           00000002
TRISIO3                           00000003
W                                 00000000
WHOLE                             B'00011111'
YELLOW                            2
YELLOW_BLUE_TRIS                  B'1010'
YELLOW_GPIO                       B'1010'
YELLOW_NOTE                       B'01001001'
YEL_CNT                           3*GRN_CNT
Z                                 00000002
_.org_0_0005                      00000005
_.org_0_010C                      0000010C
_CONFIG                           00000FFF
_CP_OFF                           00000FFF
_CP_ON                            00000FF7
_IDLOC0                           00000200
_IDLOC1                           00000201
_IDLOC2                           00000202
_IDLOC3                           00000203
_IntRC_OSC                        00000FFF
_MCLRE_OFF                        00000FEF
_MCLRE_ON                         00000FFF
_OSC_IntRC                        00000FFF
_WDTE_OFF                         00000FFB
_WDTE_ON                          00000FFF
_WDT_OFF                          00000FFB
_WDT_ON                           00000FFF
__10F202                          00000001
blink_led                         000001E9
brc                               
brnc                              
brnz                              
brz                               
btn_down                          00000000
cap_cnt                           00000007
case                              
clamp_off                         
clamp_on                          
delay                             00000002
delayH                            delay+1
delay_ms                          00000001
display_length                    000001CE
game_over                         000001CB
half_period                       00000004
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE 25


SYMBOL TABLE
  LABEL                             VALUE 

init                              0000011D
keep_going                        00000136
led                               00000001
led_gpio_table                    00000062
led_off                           
led_on                            0000006C
led_sweep                         00000133
led_tris_table                    00000067
len                               notes_cnt
load_note                         000000B6
load_note1                        000000C6
loadr16                           
lt10                              000001E0
lt25                              000001D9
lt5                               000001E7
main                              00000125
next_set                          00000130
note                              000000DE
note01                            000000F2
note02                            000000F8
note1                             000000FC
note2                             00000100
note3                             0000010C
note4                             0000010D
note5                             00000110
note_off                          
note_on                           
note_table                        0000001F
notes_cnt                         00000008
pause                             00000112
pause_table                       0000000D
play_rand                         0000014D
play_rand02                       00000158
play_victory_theme                000001B8
playback_success                  00000199
post                              00000126
prt01                             000001BA
rand                              00000009
random                            000000CF
rbtn1                             00000076
rbtn3                             00000081
read_buttons                      00000073
rocky_theme                       00000039
rotate_right_twice                000000CB
shift_left_slot                   000000AE
skpeq                             
skpneq                            
store_note                        00000096
store_note1                       000000A7
switch                            
t0                                00000014
t1                                00000015
t2                                00000016
MPASM 5.71                   POCKETSIMON.ASM   1-2-2017  13:08:23         PAGE 26


SYMBOL TABLE
  LABEL                             VALUE 

t3                                00000017
timeout                           00000005
translate_table                   0000001A
tune_array                        0000000C
victory                           000001B4
victory_final                     000001B6
wait01                            0000016C
wait02                            0000016E
wait1sec                          000001F7
wait_btn_release                  000000D8
wait_playback                     0000016B

Errors   :     0
Warnings :     0 reported,    49 suppressed
Messages :     0 reported,     4 suppressed

