MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; NAME: PocketSimon
                      00002 ; DESC:  simon game implemented on a PIC10F202
                      00003 ; COPYRIGHT: jacques Deschenes, 2012,2016  
                      00004 ; LICENCE: GPLv3    
                      00005 ; DATE: 2012-03-05
                      00006 ; REVISION: 2016-12-31    
                      00007 ; VERSION: 1.1
                      00008 ; 
                      00009 ; GAME:  4 LEDs associated with 4 notes. A sequence of notes must be repeated by
                      00010 ; the player. At success a new note is appended at the end of sequence.
                      00011 ; After 6, 12, 18, 24 and 32 notes success a tune is played. The maximun length of
                      00012 ; sequence is 32 notes. A player that succeed to replay the full 32 notes sequence
                      00013 ; hear the complete victory tune after what the game start over.
                      00014 ; At end of each game the length of sequence is displayed.
                      00015 ; The display work like this:
                      00016 ;  BLUE LED is 25
                      00017 ;  YELLOW LED is 10
                      00018 ;  RED LED is 5
                      00019 ;  GREEN LED is 1
                      00020 ; length=NB*25+NY*10+NR*5+NG
                      00021 ;  where Nx is the number of blink for each color.    
                      00022 ; At first error the game is over and a MCU wait for a new set.
                      00023 ; At power on the MCU run a Power On Self Test, which consist of lighting 
                      00024 ; the 4 LEDs sequencially while sounding the associated note. 
                      00025 ; After POST the 4 LEDs light in loop until the player press a
                      00026 ; button to start game. 
                      00027 ;
                      00028 ; DESCRIPTION: the purpose of this project is to demonstrate the use of a single
                      00029 ; logic I/O to read many switches using a capacitor charging time.
                      00030 ; The game use 4 switches that are all connected  to a resistors ladder. The bottom
                      00031 ; of this ladder is connected to a capacitor and to the GP3 input. The time it take
                      00032 ; for this capacitor to charge to a logic 1 level depend on which button is pressed.    
                      00033 ; Four LEDs of different colour are connected to GP0 and GP1
                      00034 ; The audio output is to GP2
                      00035 ; a PNP small switching transistor is used to drive an 150 ohm speaker
                      00036 ; Another NPN small signal transistor is also connected GP2. This one is used
                      00037 ; to discharge the switches timing capacitor. As the 2 transistors are controlled by
                      00038 ; the same I/O as an inconvinience.    
                      00039 ; The inconvience of this design is that when reading buttons a noise is heard in speaker.
                      00040 ; I consider this to be a small inconvience.
                      00041 ; This design connect 2 LEDs in series from V+ to ground and consequently works only
                      00042 ; with a 3 volt power supply. For a voltage over 3 volt a permanent current path is
                      00043 ; formed through diodes GREEN, RED and YELLOW, BLUE and the LEDs are always ligthed.
                      00044 ; But with a 3 volt power supply it works fine because the conduction voltage of 2 LEDs
                      00045 ; in series in over 3 volts.
                      00046 ; see schematic for detail.
                      00047 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00048 ;This program is free software: you can redistribute it and/or modify
                      00049 ;    it under the terms of the GNU General Public License as published by
                      00050 ;    the Free Software Foundation, either version 3 of the License, or
                      00051 ;    (at your option) any later version.
                      00052 ;
                      00053 ;    This program is distributed in the hope that it will be useful,
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054 ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                      00055 ;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                      00056 ;    GNU General Public License for more details.
                      00057 ;
                      00058 ;    You should have received a copy of the GNU General Public License
                      00059 ;    along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                      00060 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00061     
                      00062     include P10F202.INC
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Nov 17 2016
                      00005 ;  MPASM PIC10F202 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      00151         LIST
                      00063     radix dec
                      00064     
0FFF   0FEB           00065     __config _MCLRE_OFF & _CP_OFF & _WDTE_OFF  ; Watchdog disabled
                      00066                                                ;'master clear' disabled
                      00067                                                ; no code protection
                      00068 
                      00069     errorlevel 2 ; warning disabled
                      00070 
                      00071 ;;;;;;    MCU option mask ;;;;;;;;;;;;;;;;;;;;
                      00072 #define OPTION_MASK B'01000001';bit7=0, wakeup on I/O change
                      00073                                ;bit6=1, pullup disabled
                      00074                                ;bit5=0, timer0 clock -> Fosc/4.
                      00075                                ;bit4=0, 
                      00076                                ;bti3=0, prescale on TIMER0
                      00077                                ;bit2-0=001, prescale 1:4
                      00078                                ;  TIMR0 increment every 4usec.
                      00079 
                      00080 
                      00081 
                      00082 #define RED_GREEN_TRIS   B'1001'
                      00083 #define YELLOW_BLUE_TRIS B'1010'
                      00084 #define RED_GPIO         B'1011'
                      00085 #define GREEN_GPIO       B'1001'
                      00086 #define YELLOW_GPIO      B'1010'
                      00087 #define BLUE_GPIO        B'1001'
                      00088 
                      00089 #define GREEN  0
                      00090 #define RED    1
                      00091 #define YELLOW 2
                      00092 #define BLUE   3
                      00093 
                      00094 #define BTN_GREEN  0
                      00095 #define BTN_RED    1
                      00096 #define BTN_YELLOW 2
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00097 #define BTN_BLUE   3
                      00098 #define BTN_NONE   4
                      00099 
                      00100 ; note for each color
                      00101 #define GREEN_NOTE   B'01000000'
                      00102 #define RED_NOTE B'01000101'
                      00103 #define YELLOW_NOTE    B'01001001'
                      00104 #define BLUE_NOTE  B'01001100'
                      00105 
                      00106 ; values for muical pauses
                      00107 #define THIRTY2TH B'10111111'
                      00108 #define SIXTEENTH B'10011111'
                      00109 #define HEIGHT    B'01111111'
                      00110 #define QUARTER   B'01011111'
                      00111 #define HALF      B'00111111'
                      00112 #define WHOLE     B'00011111'
                      00113 
                      00114 #define AUDIO  GPIO, GP2
                      00115 #define CLAMP GPIO, GP2
                      00116 
                      00117 ; charging time delay
                      00118 ; this is adjusted by testing
                      00119 ; It may vary due to components
                      00120 ; tolerance.
                      00121 ; When pressing RED button if
                      00122 ; GREEN LED turn on increase
                      00123 ; GRN_CNT value.
                      00124 ; On the contrary if YELLOW LED
                      00125 ; turn on decrease GRN_CNT value.                              
                      00126 #define GRN_CNT 20
                      00127 #define RED_CNT 2*GRN_CNT
                      00128 #define YEL_CNT 3*GRN_CNT
                      00129 #define BLUE_CNT 4*GRN_CNT
                      00130 #define TC_MAX 5*GRN_CNT
                      00131 
                      00132 ;;;;;;;;;;;;    MACROS  ;;;;;;;;;;;;;;;;;;;;;;
                      00133 
                      00134 
                      00135 led_off macro
                      00136  movlw B'1011'
                      00137  tris GPIO
                      00138  endm
                      00139 
                      00140 note_off macro
                      00141  bsf AUDIO
                      00142  endm
                      00143 
                      00144 note_on macro
                      00145  bcf AUDIO
                      00146  endm
                      00147 
                      00148 clamp_on macro
                      00149  bsf CLAMP
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00150  endm
                      00151 
                      00152 clamp_off macro
                      00153  bcf CLAMP
                      00154  endm
                      00155 
                      00156 brz macro address  ; branch on zero flag
                      00157  skpnz
                      00158  goto address
                      00159  endm
                      00160 
                      00161 brnz macro address ; branch on not zero flag
                      00162  skpz
                      00163  goto address
                      00164  endm
                      00165 
                      00166 brc macro address ; branch on carry flag
                      00167  skpnc
                      00168  goto address
                      00169  endm
                      00170 
                      00171 brnc macro address ; branch on not carry flag
                      00172  skpc
                      00173  goto address
                      00174  endm
                      00175 
                      00176 skpeq macro var, val ; skip next instruction if variable == val
                      00177   movlw val
                      00178   xorwf var, W
                      00179   skpz
                      00180   endm
                      00181 
                      00182 skpneq macro var, val ; skip next instruction if variable!=val
                      00183  movlw val
                      00184  xorwf var, W
                      00185  skpnz
                      00186  endm
                      00187 
                      00188 
                      00189 ; switch marco
                      00190 switch macro var ; put variable in W for use by following case
                      00191  movfw var
                      00192  endm
                      00193 
                      00194 case macro  n, address  ; go to address if W==n
                      00195  xorlw n
                      00196  brz address
                      00197  xorlw n ; reset W for next case
                      00198  endm
                      00199 
                      00200 
                      00201 loadr16 macro r16, n  ; load r16 with constant
                      00202  local h,l
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00203  h=high n
                      00204  l=low n
                      00205  if l==0
                      00206    clrf r16
                      00207  else
                      00208    movlw low n
                      00209    movwf r16
                      00210  endif
                      00211  if h==0
                      00212    clrf r16+1
                      00213  else
                      00214    movlw h
                      00215    movwf r16+1
                      00216  endif
                      00217  endm
                      00218 
                      00219 ;;;;;;;;;;;;;;;; VARIABLES  ;;;;;;;;;;;;;;;;;;;;;
                      00220     udata
0000                  00221   btn_down res 1  ; which button is down
0001                  00222   led res 1 ; active led value
0002                  00223   delay res 2 ; delay counter used by delay_ms subroutine.
0004                  00224   half_period res 1 ; note half-period delay
0005                  00225   timeout res 2 ; inactivity timeout
0007                  00226   cap_cnt res 1 ; capacitor charge time
0008                  00227   notes_cnt res 1 ; sequence length
0009                  00228   rand res 3 ; pseudo random number generator register
000C                  00229   tune_array res 8 ; note sequence array maximun 32 notes. 2 bits used per note.
0014                  00230   t0 res 1 ; temporary storage
0015                  00231   t1 res 1 
0016                  00232   t2 res 1
0017                  00233   t3 res 1
                      00234 
                      00235   code 
                      00236 ;;;;;;;;;;;;;;;;;;; CODE SEGMENT ;;;;;;;;;;;;;;;;;;
                      00237     org 0
0000   0A??           00238  goto init
                      00239 
                      00240 ;;;;;;;;;;    delay_ms  ;;;;;;;;;;;;;;;;;;
                      00241 ; delay in miliseconds
                      00242 ; delay = value in msec
                      00243 #define delayH delay+1
0001                  00244 delay_ms:
0001   0C07           00245  movlw .7
0002   0021           00246  movwf TMR0
0003   0201           00247  movfw TMR0
0004   0743           00248  skpz
0005   0A??           00249  goto $-2
0006   0C01           00250  movlw 1
0007   00??           00251  subwf delay,F
0008   0703           00252  skpc
0009   00??           00253  subwf delayH,F
000A   0603           00254  skpnc
000B   0A??           00255  goto delay_ms
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000C   0800           00256  return
                      00257  
                      00258 
000D                  00259 translate_table: ;translate button to corresponding note
000D   01E2           00260  addwf PCL, F
000E   0840           00261  dt GREEN_NOTE
000F   0845           00262  dt RED_NOTE
0010   0849           00263  dt YELLOW_NOTE
0011   084C           00264  dt BLUE_NOTE
                      00265 
0012                  00266 note_table: ; tempered scale
0012   01E2           00267  addwf PCL, F
0013   08FE           00268  dt .254  ; G3     blue note (0)
0014   08F0           00269  dt .240  ; G#3
0015   08E2           00270  dt .226  ; A3
0016   08D6           00271  dt .214  ; A#3
0017   08C9           00272  dt .201  ; B3
0018   08BE           00273  dt .190  ; C4     yellow note (5)
0019   08B3           00274  dt .179  ; C#4
001A   08A9           00275  dt .169  ; D4
001B   08A0           00276  dt .160  ; D#4
001C   0897           00277  dt .151  ; E4     red note (9)
001D   088E           00278  dt .142  ; F4
001E   0886           00279  dt .134  ; F#4
001F   087F           00280  dt .127  ; G4     green note (12)
0020   0877           00281  dt .119  ; G#4
0021   0871           00282  dt .113  ; A4
0022   086A           00283  dt .106  ; A#4
0023   0864           00284  dt .100  ; B4
0024   085F           00285  dt .95   ; C5
0025   0859           00286  dt .89   ; C#5
0026   0854           00287  dt .84   ; D5
0027   084F           00288  dt .79   ; D#5
0028   084B           00289  dt .75   ; E5
0029   0847           00290  dt .71   ; F5
002A   0843           00291  dt .67   ; F#5
002B   083F           00292  dt .63   ; G5
                      00293 
                      00294 ; rocky 1 movie theme 
002C                  00295 rocky_theme:
002C   01E2           00296  addwf PCL,F
002D   0889           00297  dt B'10001001' ; 16e
002E   086B           00298  dt B'01101011' ; 8g
002F   089F           00299  dt B'10011111' ; 16p
0030   082E           00300  dt B'00101110' ; 2a
0031   087F           00301  dt B'01111111' ; 8p
0032   088E           00302  dt B'10001110' ; 16a
0033   0870           00303  dt B'01110000' ; 8b
0034   089F           00304  dt B'10011111' ; 16p
0035   0829           00305  dt B'00101001' ; 2e
0036   089F           00306  dt B'10011111' ; 16p
0037   08BF           00307  dt B'10111111' ; 32p
0038   0889           00308  dt B'10001001' ; 16e
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0039   086B           00309  dt B'01101011' ; 8g
003A   089F           00310  dt B'10011111' ; 16p
003B   082E           00311  dt B'00101110' ; 2a
003C   089F           00312  dt B'10011111' ; 16p
003D   08BF           00313  dt B'10111111' ; 32p
003E   088E           00314  dt B'10001110' ; 16a
003F   0870           00315  dt B'01110000' ; 8b
0040   089F           00316  dt B'10011111' ; 16p
0041   0809           00317  dt B'00001001' ; 1e
0042   087F           00318  dt B'01111111' ; 8p
0043   089F           00319  dt B'10011111' ; 16p
0044   0887           00320  dt B'10000111' ; 16d4
0045   0885           00321  dt B'10000101' ; 16c4
0046   0867           00322  dt B'01100111' ; 8d4
0047   089F           00323  dt B'10011111' ; 16p
0048   0891           00324  dt B'10010001' ; 16c5
0049   0893           00325  dt B'10010011' ; 16d5
004A   0855           00326  dt B'01010101' ; 4e5
004B   085F           00327  dt B'01011111' ; 4p
004C   0891           00328  dt B'10010001' ; 16c5
004D   0891           00329  dt B'10010001' ; 16c5
004E   0870           00330  dt B'01110000' ; 8b
004F   0890           00331  dt B'10010000' ; 16b
0050   086E           00332  dt B'01101110' ; 8a
0051   088E           00333  dt B'10001110' ; 16a
0052   084B           00334  dt B'01001011' ; 4g
0053   0876           00335  dt B'01110110' ; 8f5
0054   0815           00336  dt B'00010101' ; 1e5
                      00337 
                      00338 
                      00339 
                      00340  ; led GPIO value for each led
0055                  00341 led_gpio_table:
0055   01E2           00342  addwf PCL,F
0056   0809           00343  dt GREEN_GPIO
0057   080B           00344  dt RED_GPIO
0058   080A           00345  dt YELLOW_GPIO
0059   0809           00346  dt BLUE_GPIO
                      00347  
                      00348 ; TRIS value for each led
005A                  00349 led_tris_table: 
005A   01E2           00350  addwf PCL,F
005B   0809           00351  dt RED_GREEN_TRIS
005C   0809           00352  dt RED_GREEN_TRIS
005D   080A           00353  dt YELLOW_BLUE_TRIS
005E   080A           00354  dt YELLOW_BLUE_TRIS
                      00355 
                      00356 ;;;;;;;  led_on  ;;;;;;;
                      00357 ;; light LED  
                      00358 ;; input: 
                      00359 ;;   variable 'led' 
                      00360 ;;   is LED identifier
                      00361 ;;;;;;;;;;;;;;;;;;;;;;;; 
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

005F                  00362 led_on:
005F   02??           00363  movfw led
0060   09??           00364  call led_gpio_table
0061   0026           00365  movwf GPIO
0062   02??           00366  movfw led
0063   09??           00367  call led_tris_table
0064   0006           00368  tris GPIO
0065   0800           00369  return
                      00370 
                      00371 
                      00372 ;;;;;;;;;;;;;;;;;  read_buttons ;;;;;;;;;;;
                      00373 ;; read GP3 
                      00374 ;; when GP3 == 1
                      00375 ;; check  cap_cnt to identify button
                      00376 ;; WORKING:
                      00377 ;;   first the clamp is released on 'C3'
                      00378 ;;   charging capacitor.
                      00379 ;;   then variable 'cap_cnt' is incremented
                      00380 ;;   until GP3 read as '1'.
                      00381 ;;   The final value of 'cap_cnt' determine
                      00382 ;;   if a button is down and which one. 
                      00383 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
0066                  00384 read_buttons:
0066   00??           00385   clrf btn_down
0067   00??           00386   clrf cap_cnt
                      00387   clamp_off ; capacitor start charging.
0068   0446               M  bcf CLAMP
0069                  00388 rbtn1: ; charging counter loop
0069   0666           00389   btfsc GPIO, GP3
006A   0A??           00390   goto rbtn3
006B   02??           00391   incf cap_cnt,F
006C   0C64           00392   movlw TC_MAX  ; charging timout
006D   00??           00393   subwf cap_cnt, W
006E   0703           00394   skpc
006F   0A??           00395   goto rbtn1
0070   0C04           00396   movlw BTN_NONE ; charging time too long,
0071   00??           00397   movwf btn_down ; assume no button down.
                      00398   clamp_on
0072   0546               M  bsf CLAMP
0073   0800           00399   return
0074                  00400 rbtn3 ; check cap_cnt value to identify button
                      00401   clamp_on ; keep 'C3' discharge when not reading.
0074   0546               M  bsf CLAMP
0075   0C14           00402   movlw GRN_CNT
0076   00??           00403   subwf cap_cnt, W
0077   0703           00404   skpc
0078   0800           00405   return  ; BTN_GREEN
0079   02??           00406   incf btn_down,F
007A   0C28           00407   movlw RED_CNT
007B   00??           00408   subwf cap_cnt, W
007C   0703           00409   skpc
007D   0800           00410   return ; BTN_RED
007E   02??           00411   incf btn_down,F
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

007F   0C3C           00412   movlw YEL_CNT
0080   00??           00413   subwf cap_cnt, W
0081   0703           00414   skpc
0082   0800           00415   return ; BTN_YELLOW
0083   02??           00416   incf btn_down,F ; BTN_BLUE
0084   0C50           00417   movlw BLUE_CNT
0085   00??           00418   subwf cap_cnt,W
0086   0603           00419   skpnc
0087   02??           00420   incf btn_down,f ; BTN_NONE
0088   0800           00421   return 
                      00422 
                      00423 ;;;;;; store_note  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00424 ;;; store note in tune_array
                      00425 ;;; inputs:
                      00426 ;;;     t0= array index where to store note {0-31}
                      00427 ;;;     t1=note  {0-3} stored as 2 bits value.
                      00428 ;;; This one is a little tricky because each byte is split in 4 slots of
                      00429 ;;; 2 bits. The position in tune_array is index/4 and the slot is the remainder.  
                      00430 ;;; So there is 4 notes per byte. The note must be stored in the good slot without
                      00431 ;;; altering the contain of others slots.
                      00432 ;;;  bits:  76|54|32|10  
                      00433 ;;;  slots: s3|s2|s1|s0  
                      00434 ;;; To get that result a AND mask is create to reset the slot to 0 and the OR
                      00435 ;;; operation is used to insert the note in the slot.  
                      00436 ;;; exemple: say the index is 6 and the note is 1. then
                      00437 ;;; byte order is 6/4=1
                      00438 ;;; slot is 6 % 4 = 2
                      00439 ;;;  AND mask is 0b11001111
                      00440 ;;                   ^^ slot 2 will be set to 0 after AND operation     
                      00441 ;;;  OR mask is 0b00010000 
                      00442 ;;;                 ^^  slot 2 will be set to 1 after OR operation
                      00443 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
0089                  00444 store_note:
                      00445 ;initialize array pointer    
0089   0C??           00446  movlw tune_array
008A   0024           00447  movwf FSR
                      00448 ; extract the byte order and put in t2 
008B   0CFC           00449  movlw 0xFC
008C   01??           00450  andwf t0,W  ; mask out 2 least significant bits 
008D   00??           00451  movwf t2 ; and put the value in t2
                      00452 ; divide by 4
008E   0403           00453  bcf STATUS, C  
008F   03??           00454  rrf t2,F
0090   03??           00455  rrf t2,F
0091   02??           00456  movfw t2
0092   01E4           00457  addwf FSR, F ; FSR=tune_array+index/4
                      00458 ; create AND mask and shift note is right slot
0093   0C03           00459  movlw 3
0094   01??           00460  andwf t1,F ; all bits to 0 except bits 0,1
0095   00??           00461  movwf t2   ; 3->t2
0096   01??           00462  andwf t0,W   ; get slot number
0097   00??           00463  subwf t2,F   ; how many times to shift left.
                      00464 ;create the AND mask
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0098   0CFC           00465  movlw 0xFC
0099   00??           00466  movwf t0
009A                  00467 store_note1:
                      00468 ; shift left AND mask and note value
                      00469 ; while shift counter not zero. 
                      00470  brnz shift_left_slot
009A   0743               M  skpz
009B   0A??               M  goto shift_left_slot
                      00471 ; the shifting is done, store note in slot. 
009C   02??           00472  movfw t0  ; AND mask
009D   0160           00473  andwf INDF,F ; reset that slot to 0
009E   02??           00474  movfw t1 ; note to W
009F   0120           00475  iorwf INDF,F ; insert note in slot
00A0   0800           00476  return
00A1                  00477 shift_left_slot: 
                      00478 ;; shift left mask 1 slot 
00A1   0403           00479  bcf STATUS, C
00A2   03??           00480  rlf t1,F
00A3   03??           00481  rlf t1,F
                      00482 ;; shift left note 1 slot 
00A4   0503           00483  bsf STATUS,C 
00A5   03??           00484  rlf t0,F
00A6   03??           00485  rlf t0,F
00A7   00??           00486  decf t2,F
00A8   0A??           00487  goto store_note1
                      00488 
                      00489 ;;;;;;  load_note  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00490 ;;; get note from tune_array and put it in W 
                      00491 ;;; input: W is array index  {0-31}
                      00492 ;;; output: t1 note {0-3}
                      00493 ;;; byte_order is index/4
                      00494 ;;; slot is index % 4
                      00495 ;;; AND mask is inverse of that store_note
                      00496 ;;; because to read a slot we want to keep the
                      00497 ;;; contain of the slot and zero all other bits.
                      00498 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
00A9                  00499 load_note:
00A9   00??           00500  movwf t0 ; save index
                      00501 ; set array pointer
00AA   0C??           00502  movlw tune_array
00AB   0024           00503  movwf FSR
00AC   0CFC           00504  movlw 0xFC
00AD   01??           00505  andwf t0,W
00AE   00??           00506  movwf t1
                      00507 ; divide index by 4 
00AF   0403           00508  bcf STATUS,C
00B0   03??           00509  rrf t1,F
00B1   03??           00510  rrf t1,W
00B2   01E4           00511  addwf FSR,F  ; FSR=tune_array+index/4
00B3   0200           00512  movfw INDF   ; get the byte containing the note slot
00B4   00??           00513  movwf t1 ; save it in t1
00B5   0C03           00514  movlw 3
00B6   00??           00515  movwf t2 ; the AND mask 
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00B7   01??           00516  andwf t0,W ; slot number index % 4 same as 2 least significant bits.
00B8   00??           00517  subwf t2,F ; how many times t1 mus be shifted right to put the slot in bits 1:0
00B9                  00518 load_note1:
                      00519 ; first shift right until the slot is in bits 1:0
                      00520  brnz rotate_right_twice
00B9   0743               M  skpz
00BA   0A??               M  goto rotate_right_twice
                      00521 ; shifting done keep bits 1:0
                      00522 ; and mask all other to zero.
00BB   0C03           00523  movlw 3
00BC   01??           00524  andwf t1,F  ; W=note
00BD   0800           00525  return
                      00526 ; slot shifted right 1 position 
00BE                  00527 rotate_right_twice:
00BE   03??           00528  rrf t1,F
00BF   03??           00529  rrf t1,F
00C0   00??           00530  decf t2,F
00C1   0A??           00531  goto load_note1
                      00532 
                      00533 
                      00534 ;;;;;;;;;  random  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00535 ;; pseudo random number generator
                      00536 ;; 24 bits linear feedback shift register 
                      00537 ;; REF: http://en.wikipedia.org/wiki/Linear_feedback_shift_register
                      00538 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00C2                  00539 random:  
00C2   0403           00540   bcf STATUS, C
00C3   03??           00541   rrf rand+2,F
00C4   03??           00542   rrf rand+1,F
00C5   03??           00543   rrf rand,F
00C6   0703           00544   skpc
00C7   0800           00545   return
00C8   0CE1           00546   movlw 0xE1
00C9   01??           00547   xorwf rand+2, F
00CA   0800           00548   return
                      00549 
                      00550 ;;;;;;;;;;   wait_btn_release  ;;;;;
                      00551 ;; repeatedly read buttons until 
                      00552 ;; until it return BTN_NONE
                      00553 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
00CB                  00554 wait_btn_release:
00CB   09??           00555  call read_buttons
                      00556  skpeq btn_down, BTN_NONE
00CC   0C04               M   movlw 4
00CD   01??               M   xorwf btn_down, W
00CE   0743               M   skpz
00CF   0A??           00557  goto wait_btn_release
00D0   0800           00558  return
                      00559 
                      00560 
                      00561 ;;;;;;;;;;;;; note  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00562 ; play a musical note from tempered scale. 
                      00563 ; input:
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00564 ;  w = note : encoding  bits 0-4 notes, note 0x1F=pause , bits 5-7 timelapse
                      00565 ; WORKING:
                      00566 ;  This subroutine is cycle counted.
                      00567 ;  Tones period are based on Tcy=1uSec
                      00568 ;  Each path in half-cycle loop is 10 Tcy.
                      00569 ;  Frequencies values are computed based on this 10 Tcy.
                      00570 ;  Any change on this code will alter the frequencies. 
                      00571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
00D1                  00572 note:
00D1   00??           00573  movwf t0
00D2   0C1F           00574  movlw 0x1F
00D3   01??           00575  andwf t0,W
00D4   0F1F           00576  xorlw 0x1F
                      00577  brz pause
00D5   0643               M  skpnz
00D6   0A??               M  goto pause
                      00578  loadr16 delay, 0x0D40
  0000                    M  local h,l
  0000000D                M  h=high 0x0D40
  00000040                M  l=low 0x0D40
                          M  if l==0
                          M    clrf delay
                          M  else
00D7   0C40               M    movlw low 0x0D40
00D8   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
00D9   0C0D               M    movlw h
00DA   00??               M    movwf delay+1
                          M  endif
00DB   0C03           00579  movlw 3
00DC   00??           00580  movwf timeout
00DD   0CE0           00581  movlw 0xE0
00DE   01??           00582  andwf t0,W
00DF   00??           00583  movwf t1
00E0   03??           00584  swapf t1,F
00E1   03??           00585  rrf t1,F
00E2   02??           00586  movf t1,F
                      00587  brz note02
00E3   0643               M  skpnz
00E4   0A??               M  goto note02
00E5                  00588 note01:
00E5   0403           00589  bcf STATUS,C
00E6   03??           00590  rrf timeout
00E7   03??           00591  rrf delay+1,F
00E8   03??           00592  rrf delay,F
00E9   02??           00593  decfsz t1
00EA   0A??           00594  goto note01
00EB                  00595 note02:
00EB   0C1F           00596  movlw 0x1F
00EC   01??           00597  andwf t0,W
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00ED   09??           00598  call note_table
00EE   00??           00599  movwf half_period
00EF                  00600 note1:
00EF   0C04           00601  movlw B'0100'
00F0   01A6           00602  xorwf GPIO, F  ; toggle output pin
00F1   02??           00603  movfw half_period
00F2   00??           00604  movwf t0
00F3                  00605 note2:
00F3   00??           00606  decf delay,F
00F4   02??           00607  comf delay,W
00F5   0743           00608  skpz
00F6   0A??           00609  goto note3
00F7   00??           00610  decf delay+1,F
00F8   02??           00611  comf delay+1,W
00F9   0743           00612  skpz
00FA   0A??           00613  goto note4  ; to get 10 Tcy in this path must goto note4
00FB   00??           00614  decf timeout,F
00FC   02??           00615  comf timeout,W
00FD   0643           00616  skpnz
00FE   0A??           00617  goto note5
00FF                  00618 note3:
00FF   0A??           00619  goto $+1
0100                  00620 note4:
0100   02??           00621  decfsz t0
0101   0A??           00622  goto note2  ; half-cycle loop
0102   0A??           00623  goto note1 ; half-cycle completed
0103                  00624 note5:
                      00625  clamp_on
0103   0546               M  bsf CLAMP
0104   0800           00626  return
                      00627 
                      00628 ;;;;; musical pause ;;;;;;;;;;;;;;
                      00629 ;; when note value is 0x1F
                      00630 ;; tone subroutine branch here.
                      00631 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
0105                  00632 pause: ;musical pause
                      00633  loadr16 delay, 2000
  0000                    M  local h,l
  00000007                M  h=high 2000
  000000D0                M  l=low 2000
                          M  if l==0
                          M    clrf delay
                          M  else
0105   0CD0               M    movlw low 2000
0106   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
0107   0C07               M    movlw h
0108   00??               M    movwf delay+1
                          M  endif
0109   03??           00634  swapf t0,F
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

010A   03??           00635  rrf t0,F
010B   0C07           00636  movlw 0x7
010C   01??           00637  andwf t0,F
010D   0643           00638  skpnz
010E   0A??           00639  goto pause01
010F                  00640 pause00: 
010F   0403           00641  clrc
0110   03??           00642  rrf delay+1,F
0111   03??           00643  rrf delay,F
0112   02??           00644  decfsz t0,F
0113   0A??           00645  goto pause00
0114                  00646 pause01: 
0114   09??           00647  call delay_ms
0115   0800           00648  return
                      00649 
                      00650 
                      00651     
                      00652 ;;;;;;;;;;;;;;;  INITIALIZATION CODE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00653  ; hardware initialization
0116                  00654 init:
0116   0C41           00655  movlw OPTION_MASK
0117   0002           00656  option 
                      00657  led_off
0118   0C0B               M  movlw B'1011'
0119   0006               M  tris GPIO
011A   00??           00658  clrf notes_cnt
011B   0CA5           00659  movlw 0xA5
011C   00??           00660  movwf rand
                      00661  clamp_on
011D   0546               M  bsf CLAMP
                      00662 
                      00663 ;;;;;;;;;;;;;;;;;;;;;;;;  MAIN PROCEDURE  ;;;;;;;;;;;;;;;;;;;;;
                      00664 ; the biggest share of the code is here
                      00665 ; because subroutine calls are limited to 2 levels
                      00666 ; It use a lot of goto instead of call.
                      00667 ; I like to factor code in many subroutines that neast each others
                      00668 ; but this is not possible with this MCU.
                      00669 ; Here is spaghetti code for your degustation (or disgustation), MCU obliged. 
                      00670 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
011E                  00671 main:
                      00672 ;;;;;;;;;;;;;;;;;;;;;;;;
                      00673 ;; power on self test
                      00674 ;; light each LED in sequence
                      00675 ;; with associated tone.
                      00676 ;;;;;;;;;;;;;;;;;;;;;;;; 
011E   00??           00677  clrf led
011F                  00678 post:
011F   09??           00679  call led_on
0120   02??           00680  movfw led
0121   09??           00681  call translate_table
0122   09??           00682  call note
0123   02??           00683  incf led,F
0124   0740           00684  btfss led, 2
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0125   0A??           00685  goto post
                      00686  led_off
0126   0C0B               M  movlw B'1011'
0127   0006               M  tris GPIO
0128   09??           00687  call wait_btn_release
0129                  00688 next_set:
0129   00??           00689  clrf led
012A   0C86           00690  movlw .134
012B   00??           00691  movwf timeout
                      00692 ; wait for a button down to start game
                      00693 ; light LEDs in sequence
                      00694 ;until a button is pressed down or timeout occur 
012C                  00695 led_sweep:
012C   02??           00696  decfsz timeout,F
012D   0A??           00697  goto keep_going
012E   0A??           00698  goto init  ; after about 35 seconds of idle time, reset.
012F                  00699 keep_going: 
012F   09??           00700  call led_on
                      00701  loadr16 delay, .250
  0000                    M  local h,l
  00000000                M  h=high .250
  000000FA                M  l=low .250
                          M  if l==0
                          M    clrf delay
                          M  else
0130   0CFA               M    movlw low .250
0131   00??               M    movwf delay
                          M  endif
                          M  if h==0
0132   00??               M    clrf delay+1
                          M  else
                          M    movlw h
                          M    movwf delay+1
                          M  endif
0133   09??           00702  call delay_ms
0134   02??           00703  incf led,F
0135   0C03           00704  movlw 3
0136   01??           00705  andwf led,F
0137   09??           00706  call read_buttons
                      00707  skpneq btn_down, BTN_NONE
0138   0C04               M  movlw 4
0139   01??               M  xorwf btn_down, W
013A   0643               M  skpnz
013B   0A??           00708  goto led_sweep
                      00709  led_off
013C   0C0B               M  movlw B'1011'
013D   0006               M  tris GPIO
013E   02??           00710  movfw timeout
013F   00??           00711  movwf rand
0140   09??           00712  call wait_btn_release
                      00713  loadr16 delay, .500
  0000                    M  local h,l
  00000001                M  h=high .500
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  000000F4                M  l=low .500
                          M  if l==0
                          M    clrf delay
                          M  else
0141   0CF4               M    movlw low .500
0142   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
0143   0C01               M    movlw h
0144   00??               M    movwf delay+1
                          M  endif
0145   09??           00714  call delay_ms
                      00715 ; game loop.
0146                  00716 play_rand:
0146   02??           00717  movfw notes_cnt
0147   00??           00718  movwf t0
0148   02??           00719  incf notes_cnt,F
                      00720 ; add a random value to sequence 
0149   09??           00721  call random
014A   02??           00722  movfw rand+2
014B   01??           00723  xorwf rand+1,W
014C   01??           00724  xorwf rand,W
014D   0E03           00725  andlw 3
014E   00??           00726  movwf t1
014F   09??           00727  call store_note
0150   00??           00728  clrf t3 ; notes counter
                      00729 ; play sequence loop 
0151                  00730 play_rand02:
0151   02??           00731  movfw t3
0152   09??           00732  call load_note
0153   02??           00733  movfw t1
0154   00??           00734  movwf led
0155   09??           00735  call led_on
0156   02??           00736  movfw led
0157   09??           00737  call translate_table
0158   09??           00738  call note
                      00739  led_off
0159   0C0B               M  movlw B'1011'
015A   0006               M  tris GPIO
                      00740  loadr16 delay, .100
  0000                    M  local h,l
  00000000                M  h=high .100
  00000064                M  l=low .100
                          M  if l==0
                          M    clrf delay
                          M  else
015B   0C64               M    movlw low .100
015C   00??               M    movwf delay
                          M  endif
                          M  if h==0
015D   00??               M    clrf delay+1
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M  else
                          M    movlw h
                          M    movwf delay+1
                          M  endif
015E   09??           00741  call delay_ms ; 1/10 second pause
015F   02??           00742  incf t3,F
0160   02??           00743  movfw notes_cnt
0161   00??           00744  subwf t3,W
0162   0743           00745  skpz
0163   0A??           00746  goto play_rand02
                      00747 ; wait player playing sequence back
0164                  00748 wait_playback:
0164   00??           00749  clrf t3 ; notes counter
0165                  00750 wait01:
0165   0CFA           00751  movlw .250   ; maximun delay between each button 250 msec.
0166   00??           00752  movwf timeout
0167                  00753 wait02: ; wait button loop
                      00754  loadr16 delay, .20
  0000                    M  local h,l
  00000000                M  h=high .20
  00000014                M  l=low .20
                          M  if l==0
                          M    clrf delay
                          M  else
0167   0C14               M    movlw low .20
0168   00??               M    movwf delay
                          M  endif
                          M  if h==0
0169   00??               M    clrf delay+1
                          M  else
                          M    movlw h
                          M    movwf delay+1
                          M  endif
016A   09??           00755  call delay_ms
016B   02??           00756  movfw timeout
016C   00??           00757  movwf rand
016D   00??           00758  decf timeout,F
016E   0643           00759  skpnz
016F   0A??           00760  goto game_over
0170   09??           00761  call read_buttons
                      00762  skpneq btn_down, BTN_NONE
0171   0C04               M  movlw 4
0172   01??               M  xorwf btn_down, W
0173   0643               M  skpnz
0174   0A??           00763  goto wait02
                      00764  loadr16 delay, .10  ; wait 10 msec before buttons
  0000                    M  local h,l
  00000000                M  h=high .10
  0000000A                M  l=low .10
                          M  if l==0
                          M    clrf delay
                          M  else
0175   0C0A               M    movlw low .10
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0176   00??               M    movwf delay
                          M  endif
                          M  if h==0
0177   00??               M    clrf delay+1
                          M  else
                          M    movlw h
                          M    movwf delay+1
                          M  endif
0178   09??           00765  call delay_ms       ; debouncing
0179   09??           00766  call read_buttons
                      00767  skpneq btn_down, BTN_NONE
017A   0C04               M  movlw 4
017B   01??               M  xorwf btn_down, W
017C   0643               M  skpnz
017D   0A??           00768  goto wait01 ; no button down
                      00769 ; light LED and play tone corresponding to that button
017E   02??           00770  movfw btn_down
017F   00??           00771  movwf led
0180   09??           00772  call led_on
0181   02??           00773  movfw led
0182   09??           00774  call translate_table
0183   09??           00775  call note
                      00776  led_off
0184   0C0B               M  movlw B'1011'
0185   0006               M  tris GPIO
0186   09??           00777  call wait_btn_release
0187   02??           00778  movfw t3
0188   09??           00779  call load_note
0189   02??           00780  movfw led
018A   00??           00781  subwf t1
018B   0743           00782  skpz
018C   0A??           00783  goto game_over ; not the good one
018D   02??           00784  incf t3,F
018E   02??           00785  movfw notes_cnt
018F   00??           00786  subwf t3,W
0190   0743           00787  skpz
0191   0A??           00788  goto wait01 ; loop to wait for next button
0192                  00789 playback_success
                      00790 ; to understand this 'switch' and 'case'
                      00791 ; machanism see macros above. 
                      00792  switch notes_cnt
0192   02??               M  movfw notes_cnt
                      00793  case .6, victory
0193   0F06               M  xorlw .6
                          M  brz victory
0194   0643               M  skpnz
0195   0A??               M  goto victory
0196   0F06               M  xorlw .6 ; reset W for next case
                      00794  case .12, victory
0197   0F0C               M  xorlw .12
                          M  brz victory
0198   0643               M  skpnz
0199   0A??               M  goto victory
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

019A   0F0C               M  xorlw .12 ; reset W for next case
                      00795  case .18, victory
019B   0F12               M  xorlw .18
                          M  brz victory
019C   0643               M  skpnz
019D   0A??               M  goto victory
019E   0F12               M  xorlw .18 ; reset W for next case
                      00796  case .24, victory
019F   0F18               M  xorlw .24
                          M  brz victory
01A0   0643               M  skpnz
01A1   0A??               M  goto victory
01A2   0F18               M  xorlw .24 ; reset W for next case
                      00797  case .32, victory_final
01A3   0F20               M  xorlw .32
                          M  brz victory_final
01A4   0643               M  skpnz
01A5   0A??               M  goto victory_final
01A6   0F20               M  xorlw .32 ; reset W for next case
                      00798  loadr16 delay, .500
  0000                    M  local h,l
  00000001                M  h=high .500
  000000F4                M  l=low .500
                          M  if l==0
                          M    clrf delay
                          M  else
01A7   0CF4               M    movlw low .500
01A8   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
01A9   0C01               M    movlw h
01AA   00??               M    movwf delay+1
                          M  endif
                      00799 ; this the default case 
01AB   09??           00800  call delay_ms
01AC   0A??           00801  goto play_rand
                      00802 ; play rocky_theme at 6,12,18,24 and 32 length success.
                      00803 ; more notes of the theme are played at each milestone.
                      00804 ; If player get at maximum sequence length (i.e. 32)
                      00805 ; the theme is played to end. 
01AD                  00806 victory:
01AD   02??           00807  movfw notes_cnt
01AE   0A??           00808  goto play_victory_theme
                      00809 ; play complete rocky theme.
01AF                  00810 victory_final:
01AF   00??           00811  clrf notes_cnt
01B0   0C28           00812  movlw .40
01B1                  00813 play_victory_theme:
01B1   00??           00814  movwf t2
01B2   00??           00815  clrf t3
01B3                  00816 prt01:
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01B3   02??           00817  movfw t3
01B4   09??           00818  call rocky_theme
01B5   09??           00819  call note
01B6   02??           00820  incf t3,F
01B7   02??           00821  movfw t2
01B8   00??           00822  subwf t3,W
01B9   0743           00823  skpz
01BA   0A??           00824  goto prt01
                      00825  loadr16 delay, 0x400
  0000                    M  local h,l
  00000004                M  h=high 0x400
  00000000                M  l=low 0x400
                          M  if l==0
01BB   00??               M    clrf delay
                          M  else
                          M    movlw low 0x400
                          M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
01BC   0C04               M    movlw h
01BD   00??               M    movwf delay+1
                          M  endif
01BE   09??           00826  call delay_ms
01BF   0C20           00827  movlw 32
01C0   01??           00828  xorwf notes_cnt,W
01C1   0743           00829  skpz
01C2   0A??           00830  goto play_rand
01C3   0A??           00831  goto init
                      00832  
                      00833 ; player failed to repeat sequence
01C4                  00834 game_over:
01C4   0C38           00835  movlw B'00111000'
01C5   09??           00836  call note ; audio alert game over
                      00837 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00838 ;; display sequence length
                      00839 ;; BLUE is 25
                      00840 ;; YELLOW is 10
                      00841 ;; RED is 5
                      00842 ;; GREEN is 1
                      00843 ;; length=NB*25+NY*10+NR*5+NG
                      00844 ;; where Nx is number of blink of
                      00845 ;; each LED.
                      00846 ;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                      00847 #define len notes_cnt
01C6   00??           00848  decf len,F
01C7                  00849 display_length:
01C7   02??           00850  movf len,F
01C8   0643           00851  skpnz
01C9   0A??           00852  goto wait1sec
01CA   0C03           00853  movlw 3
01CB   00??           00854  movwf led
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01CC   0C19           00855  movlw .25
01CD   00??           00856  subwf len,W
01CE   0703           00857  skpc
01CF   0A??           00858  goto lt25 ; <25
01D0   00??           00859  movwf len
01D1   0A??           00860  goto blink_led
01D2                  00861 lt25:
01D2   00??           00862  decf led,F
01D3   0C0A           00863  movlw .10
01D4   00??           00864  subwf len,W
01D5   0703           00865  skpc
01D6   0A??           00866  goto lt10; <10
01D7   00??           00867  movwf len
01D8   0A??           00868  goto blink_led
01D9                  00869 lt10:
01D9   00??           00870  decf led,F
01DA   0C05           00871  movlw .5
01DB   00??           00872  subwf len,W
01DC   0703           00873  skpc
01DD   0A??           00874  goto lt5 ; <5
01DE   00??           00875  movwf len
01DF   0A??           00876  goto blink_led
01E0                  00877 lt5:
01E0   00??           00878  decf led,F
01E1   00??           00879  decf len,F
01E2                  00880 blink_led:
01E2   09??           00881  call led_on
                      00882  loadr16 delay, .500
  0000                    M  local h,l
  00000001                M  h=high .500
  000000F4                M  l=low .500
                          M  if l==0
                          M    clrf delay
                          M  else
01E3   0CF4               M    movlw low .500
01E4   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
01E5   0C01               M    movlw h
01E6   00??               M    movwf delay+1
                          M  endif
01E7   09??           00883  call delay_ms ; 500 msec pause
                      00884  led_off
01E8   0C0B               M  movlw B'1011'
01E9   0006               M  tris GPIO
                      00885  loadr16 delay, .500
  0000                    M  local h,l
  00000001                M  h=high .500
  000000F4                M  l=low .500
                          M  if l==0
                          M    clrf delay
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M  else
01EA   0CF4               M    movlw low .500
01EB   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
01EC   0C01               M    movlw h
01ED   00??               M    movwf delay+1
                          M  endif
01EE   09??           00886  call delay_ms ; 500 msec pause
01EF   0A??           00887  goto display_length
                      00888 ;wait 1 second before resuming
                      00889 ;to next_set 
01F0                  00890 wait1sec:
                      00891  loadr16 delay, .1000
  0000                    M  local h,l
  00000003                M  h=high .1000
  000000E8                M  l=low .1000
                          M  if l==0
                          M    clrf delay
                          M  else
01F0   0CE8               M    movlw low .1000
01F1   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
01F2   0C03               M    movlw h
01F3   00??               M    movwf delay+1
                          M  endif
01F4   09??           00892  call delay_ms
01F5   0A??           00893  goto next_set
                      00894  
0FEB                  00895  end
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE 23


SYMBOL TABLE
  LABEL                             VALUE 

AUDIO                             GPIO, GP2
BLUE                              3
BLUE_CNT                          4*GRN_CNT
BLUE_GPIO                         B'1001'
BLUE_NOTE                         B'01001100'
BTN_BLUE                          3
BTN_GREEN                         0
BTN_NONE                          4
BTN_RED                           1
BTN_YELLOW                        2
C                                 00000000
CAL0                              00000001
CAL1                              00000002
CAL2                              00000003
CAL3                              00000004
CAL4                              00000005
CAL5                              00000006
CAL6                              00000007
CLAMP                             GPIO, GP2
DC                                00000001
F                                 00000001
FOSC4                             00000000
FSR                               00000004
GP0                               00000000
GP1                               00000001
GP2                               00000002
GP3                               00000003
GPIO                              00000006
GPWUF                             00000007
GREEN                             0
GREEN_GPIO                        B'1001'
GREEN_NOTE                        B'01000000'
GRN_CNT                           20
HALF                              B'00111111'
HEIGHT                            B'01111111'
INDF                              00000000
NOT_GPPU                          00000006
NOT_GPWU                          00000007
NOT_PD                            00000003
NOT_TO                            00000004
OPTION_MASK                       B'01000001'
OSCCAL                            00000005
PCL                               00000002
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
QUARTER                           B'01011111'
RED                               1
RED_CNT                           2*GRN_CNT
RED_GPIO                          B'1011'
RED_GREEN_TRIS                    B'1001'
RED_NOTE                          B'01000101'
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE 24


SYMBOL TABLE
  LABEL                             VALUE 

SIXTEENTH                         B'10011111'
STATUS                            00000003
T0CS                              00000005
T0SE                              00000004
TC_MAX                            5*GRN_CNT
THIRTY2TH                         B'10111111'
TMR0                              00000001
TRISIO0                           00000000
TRISIO1                           00000001
TRISIO2                           00000002
TRISIO3                           00000003
W                                 00000000
WHOLE                             B'00011111'
YELLOW                            2
YELLOW_BLUE_TRIS                  B'1010'
YELLOW_GPIO                       B'1010'
YELLOW_NOTE                       B'01001001'
YEL_CNT                           3*GRN_CNT
Z                                 00000002
_.org_0_0005                      00000005
_.org_0_00FF                      000000FF
_CONFIG                           00000FFF
_CP_OFF                           00000FFF
_CP_ON                            00000FF7
_IDLOC0                           00000200
_IDLOC1                           00000201
_IDLOC2                           00000202
_IDLOC3                           00000203
_IntRC_OSC                        00000FFF
_MCLRE_OFF                        00000FEF
_MCLRE_ON                         00000FFF
_OSC_IntRC                        00000FFF
_WDTE_OFF                         00000FFB
_WDTE_ON                          00000FFF
_WDT_OFF                          00000FFB
_WDT_ON                           00000FFF
__10F202                          00000001
blink_led                         000001E2
brc                               
brnc                              
brnz                              
brz                               
btn_down                          00000000
cap_cnt                           00000007
case                              
clamp_off                         
clamp_on                          
delay                             00000002
delayH                            delay+1
delay_ms                          00000001
display_length                    000001C7
game_over                         000001C4
half_period                       00000004
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE 25


SYMBOL TABLE
  LABEL                             VALUE 

init                              00000116
keep_going                        0000012F
led                               00000001
led_gpio_table                    00000055
led_off                           
led_on                            0000005F
led_sweep                         0000012C
led_tris_table                    0000005A
len                               notes_cnt
load_note                         000000A9
load_note1                        000000B9
loadr16                           
lt10                              000001D9
lt25                              000001D2
lt5                               000001E0
main                              0000011E
next_set                          00000129
note                              000000D1
note01                            000000E5
note02                            000000EB
note1                             000000EF
note2                             000000F3
note3                             000000FF
note4                             00000100
note5                             00000103
note_off                          
note_on                           
note_table                        00000012
notes_cnt                         00000008
pause                             00000105
pause00                           0000010F
pause01                           00000114
play_rand                         00000146
play_rand02                       00000151
play_victory_theme                000001B1
playback_success                  00000192
post                              0000011F
prt01                             000001B3
rand                              00000009
random                            000000C2
rbtn1                             00000069
rbtn3                             00000074
read_buttons                      00000066
rocky_theme                       0000002C
rotate_right_twice                000000BE
shift_left_slot                   000000A1
skpeq                             
skpneq                            
store_note                        00000089
store_note1                       0000009A
switch                            
t0                                00000014
t1                                00000015
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  22:32:16         PAGE 26


SYMBOL TABLE
  LABEL                             VALUE 

t2                                00000016
t3                                00000017
timeout                           00000005
translate_table                   0000000D
tune_array                        0000000C
victory                           000001AD
victory_final                     000001AF
wait01                            00000165
wait02                            00000167
wait1sec                          000001F0
wait_btn_release                  000000CB
wait_playback                     00000164

Errors   :     0
Warnings :     0 reported,    51 suppressed
Messages :     0 reported,     4 suppressed

