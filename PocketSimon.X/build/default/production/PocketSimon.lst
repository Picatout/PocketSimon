MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; NAME: PocketSimon
                      00002 ; DESC:  simon game implemented on a PIC10F202
                      00003 ; COPYRIGHT: jacques Deschenes, 2012,2016  
                      00004 ; LICENCE: GPLv3    
                      00005 ; DATE: 2012-03-05
                      00006 ; REVISION: 2016-12-31    
                      00007 ; VERSION: 1.1
                      00008 ; 
                      00009 ; GAME:  4 LEDs associated with 4 notes. A sequence of notes must be repeated by
                      00010 ; the player. At success a new note is appended at the end of sequence.
                      00011 ; After 6, 12, 18, 24 and 32 notes success a tune is played. The maximun length of
                      00012 ; sequence is 32 notes. A player that succeed to replay the full 32 notes sequence
                      00013 ; hear the complete victory tune after what the game start over.
                      00014 ; At end of each game the length of sequence is displayed.
                      00015 ; The display work like this:
                      00016 ;  BLUE LED is 25
                      00017 ;  YELLOW LED is 10
                      00018 ;  RED LED is 5
                      00019 ;  GREEN LED is 1
                      00020 ; length=NB*25+NY*10+NR*5+NG
                      00021 ;  where Nx is the number of blink for each color.    
                      00022 ; At first error the game is over and a MCU wait for a new set.
                      00023 ; At power on the MCU run a Power On Self Test, which consist of lighting 
                      00024 ; the 4 LEDs sequencially while sounding the associated note. 
                      00025 ; After POST the 4 LEDs light in loop until the player press a
                      00026 ; button to start game. 
                      00027 ;
                      00028 ; DESCRIPTION: the purpose of this project is to demonstrate the use of a single
                      00029 ; logic I/O to read many switches using a capacitor charging time.
                      00030 ; The game use 4 switches that are all connected  to a resistors ladder. The bottom
                      00031 ; of this ladder is connected to a capacitor and to the GP3 input. The time it take
                      00032 ; for this capacitor to charge to a logic 1 level depend on which button is pressed.    
                      00033 ; Four LEDs of different colour are connected to GP0 and GP1
                      00034 ; The audio output is to GP2
                      00035 ; a PNP small switching transistor is used to drive an 150 ohm speaker
                      00036 ; Another NPN small signal transistor is also connected GP2. This one is used
                      00037 ; to discharge the switches timing capacitor. As the 2 transistors are controlled by
                      00038 ; the same I/O as an inconvinience.    
                      00039 ; The inconvience of this design is that when reading buttons a noise is heard in speaker.
                      00040 ; I consider this to be a small inconvience.
                      00041 ; This design connect 2 LEDs in series from V+ to ground and consequently works only
                      00042 ; with a 3 volt power supply. For a voltage over 3 volt a permanent current path is
                      00043 ; formed through diodes GREEN, RED and YELLOW, BLUE and the LEDs are always ligthed.
                      00044 ; But with a 3 volt power supply it works fine because the conduction voltage of 2 LEDs
                      00045 ; in series in over 3 volts.
                      00046 ; see schematic for detail.
                      00047 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00048 ;This program is free software: you can redistribute it and/or modify
                      00049 ;    it under the terms of the GNU General Public License as published by
                      00050 ;    the Free Software Foundation, either version 3 of the License, or
                      00051 ;    (at your option) any later version.
                      00052 ;
                      00053 ;    This program is distributed in the hope that it will be useful,
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054 ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                      00055 ;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                      00056 ;    GNU General Public License for more details.
                      00057 ;
                      00058 ;    You should have received a copy of the GNU General Public License
                      00059 ;    along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                      00060 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00061     
                      00062     include P10F202.INC
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Nov 17 2016
                      00005 ;  MPASM PIC10F202 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      00151         LIST
                      00063     radix dec
                      00064     
0FFF   0FEB           00065     __config _MCLRE_OFF & _CP_OFF & _WDTE_OFF  ; Watchdog disabled
                      00066                                                ;'master clear' disabled
                      00067                                                ; no code protection
                      00068 
                      00069     errorlevel 2 ; warning disabled
                      00070 
                      00071 ;;;;;;    MCU option mask ;;;;;;;;;;;;;;;;;;;;
                      00072 #define OPTION_MASK B'01000001';bit7=0, wakeup on I/O change
                      00073                                ;bit6=1, pullup disabled
                      00074                                ;bit5=0, timer0 clock -> Fosc/4.
                      00075                                ;bit4=0, 
                      00076                                ;bti3=0, prescale on TIMER0
                      00077                                ;bit2-0=001, prescale 1:4
                      00078                                ;  TIMR0 increment every 4usec.
                      00079 
                      00080 
                      00081 
                      00082 #define RED_GREEN_TRIS   B'1001'
                      00083 #define YELLOW_BLUE_TRIS B'1010'
                      00084 #define RED_GPIO         B'1011'
                      00085 #define GREEN_GPIO       B'1001'
                      00086 #define YELLOW_GPIO      B'1010'
                      00087 #define BLUE_GPIO        B'1001'
                      00088 
                      00089 #define GREEN  0
                      00090 #define RED    1
                      00091 #define YELLOW 2
                      00092 #define BLUE   3
                      00093 
                      00094 #define BTN_GREEN  0
                      00095 #define BTN_RED    1
                      00096 #define BTN_YELLOW 2
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00097 #define BTN_BLUE   3
                      00098 #define BTN_NONE   4
                      00099 
                      00100 ; note for each color
                      00101 #define GREEN_NOTE   B'01000000'
                      00102 #define RED_NOTE B'01000101'
                      00103 #define YELLOW_NOTE    B'01001001'
                      00104 #define BLUE_NOTE  B'01001100'
                      00105 
                      00106 ; values for muical pauses
                      00107 #define THIRTY2TH B'10111111'
                      00108 #define SIXTEENTH B'10011111'
                      00109 #define HEIGHT    B'01111111'
                      00110 #define QUARTER   B'01011111'
                      00111 #define HALF      B'00111111'
                      00112 #define WHOLE     B'00011111'
                      00113 
                      00114 #define AUDIO  GPIO, GP2
                      00115 #define CLAMP GPIO, GP2
                      00116 
                      00117 ; charging time delay
                      00118 ; this is adjusted by testing
                      00119 ; It may vary due to components
                      00120 ; tolerance.
                      00121 ; When pressing RED button if
                      00122 ; GREEN LED turn on increase
                      00123 ; GRN_CNT value.
                      00124 ; On the contrary if YELLOW LED
                      00125 ; turn on decrease GRN_CNT value.                              
                      00126 #define GRN_CNT 20
                      00127 #define RED_CNT 2*GRN_CNT
                      00128 #define YEL_CNT 3*GRN_CNT
                      00129 #define BLUE_CNT 4*GRN_CNT
                      00130 #define TC_MAX 5*GRN_CNT
                      00131 
                      00132 ;;;;;;;;;;;;    MACROS  ;;;;;;;;;;;;;;;;;;;;;;
                      00133 
                      00134 
                      00135 led_off macro
                      00136  movlw B'1011'
                      00137  tris GPIO
                      00138  endm
                      00139 
                      00140 note_off macro
                      00141  bsf AUDIO
                      00142  endm
                      00143 
                      00144 note_on macro
                      00145  bcf AUDIO
                      00146  endm
                      00147 
                      00148 clamp_on macro
                      00149  bsf CLAMP
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00150  endm
                      00151 
                      00152 clamp_off macro
                      00153  bcf CLAMP
                      00154  endm
                      00155 
                      00156 brz macro address  ; branch on zero flag
                      00157  skpnz
                      00158  goto address
                      00159  endm
                      00160 
                      00161 brnz macro address ; branch on not zero flag
                      00162  skpz
                      00163  goto address
                      00164  endm
                      00165 
                      00166 brc macro address ; branch on carry flag
                      00167  skpnc
                      00168  goto address
                      00169  endm
                      00170 
                      00171 brnc macro address ; branch on not carry flag
                      00172  skpc
                      00173  goto address
                      00174  endm
                      00175 
                      00176 skpeq macro var, val ; skip next instruction if variable == val
                      00177   movlw val
                      00178   xorwf var, W
                      00179   skpz
                      00180   endm
                      00181 
                      00182 skpneq macro var, val ; skip next instruction if variable!=val
                      00183  movlw val
                      00184  xorwf var, W
                      00185  skpnz
                      00186  endm
                      00187 
                      00188 
                      00189 ; switch marco
                      00190 switch macro var ; put variable in W for use by following case
                      00191  movfw var
                      00192  endm
                      00193 
                      00194 case macro  n, address  ; go to address if W==n
                      00195  xorlw n
                      00196  brz address
                      00197  xorlw n ; reset W for next case
                      00198  endm
                      00199 
                      00200 ; load 16 bits variable with constant
                      00201 ; use conditional assembly to optimize size
                      00202 ; depending on constant value.
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00203 ; resulting code size is between 2 and 4 instructions 
                      00204 loadr16 macro r16, n 
                      00205  local h,l
                      00206  h=high n
                      00207  l=low n
                      00208  if l==0
                      00209    clrf r16
                      00210  else
                      00211    movlw low n
                      00212    movwf r16
                      00213  endif
                      00214  if h==0
                      00215    clrf r16+1
                      00216  else
                      00217    movlw h
                      00218    movwf r16+1
                      00219  endif
                      00220  endm
                      00221 
                      00222 ;;;;;;;;;;;;;;;; VARIABLES  ;;;;;;;;;;;;;;;;;;;;;
                      00223     udata
0000                  00224   btn_down res 1  ; which button is down
0001                  00225   led res 1 ; active led value
0002                  00226   delay res 2 ; delay counter used by delay_ms subroutine.
0004                  00227   half_period res 1 ; note half-period delay
0005                  00228   timeout res 2 ; inactivity timeout
0007                  00229   cap_cnt res 1 ; capacitor charge time
0008                  00230   notes_cnt res 1 ; sequence length
0009                  00231   rand res 3 ; pseudo random number generator register
000C                  00232   tune_array res 8 ; note sequence array maximun 32 notes. 2 bits used per note.
0014                  00233   t0 res 1 ; temporary storage
0015                  00234   t1 res 1 
0016                  00235   t2 res 1
0017                  00236   t3 res 1
                      00237 
                      00238 ; access to higher bytes of multibytes variables 
                      00239 #define delayH delay+1
                      00240 #define timeoutH timeout+1
                      00241 #define randH rand+1
                      00242 #define randU rand+2
                      00243  
                      00244   code 
                      00245 ;;;;;;;;;;;;;;;;;;; CODE SEGMENT ;;;;;;;;;;;;;;;;;;
                      00246     org 0
0000   0A??           00247  goto init
                      00248 
                      00249 ;;;;;;;;;;    delay_ms  ;;;;;;;;;;;;;;;;;;
                      00250 ; delay in miliseconds
                      00251 ; delay = value in msec
                      00252 
0001                  00253 delay_ms:
0001   0C07           00254  movlw .7
0002   0021           00255  movwf TMR0
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0003   0201           00256  movfw TMR0
0004   0743           00257  skpz
0005   0A??           00258  goto $-2
0006   0C01           00259  movlw 1
0007   00??           00260  subwf delay,F
0008   0703           00261  skpc
0009   00??           00262  subwf delayH,F
000A   0603           00263  skpnc
000B   0A??           00264  goto delay_ms
000C   0800           00265  return
                      00266  
                      00267 
000D                  00268 translate_table: ;translate button to corresponding note
000D   01E2           00269  addwf PCL, F
000E   0840           00270  dt GREEN_NOTE
000F   0845           00271  dt RED_NOTE
0010   0849           00272  dt YELLOW_NOTE
0011   084C           00273  dt BLUE_NOTE
                      00274 
0012                  00275 note_table: ; tempered scale
0012   01E2           00276  addwf PCL, F
0013   08FE           00277  dt .254  ; G3     blue note (0)
0014   08F0           00278  dt .240  ; G#3
0015   08E2           00279  dt .226  ; A3
0016   08D6           00280  dt .214  ; A#3
0017   08C9           00281  dt .201  ; B3
0018   08BE           00282  dt .190  ; C4     yellow note (5)
0019   08B3           00283  dt .179  ; C#4
001A   08A9           00284  dt .169  ; D4
001B   08A0           00285  dt .160  ; D#4
001C   0897           00286  dt .151  ; E4     red note (9)
001D   088E           00287  dt .142  ; F4
001E   0886           00288  dt .134  ; F#4
001F   087F           00289  dt .127  ; G4     green note (12)
0020   0877           00290  dt .119  ; G#4
0021   0871           00291  dt .113  ; A4
0022   086A           00292  dt .106  ; A#4
0023   0864           00293  dt .100  ; B4
0024   085F           00294  dt .95   ; C5
0025   0859           00295  dt .89   ; C#5
0026   0854           00296  dt .84   ; D5
0027   084F           00297  dt .79   ; D#5
0028   084B           00298  dt .75   ; E5
0029   0847           00299  dt .71   ; F5
002A   0843           00300  dt .67   ; F#5
002B   083F           00301  dt .63   ; G5
                      00302 
                      00303 ; rocky 1 movie theme 
002C                  00304 rocky_theme:
002C   01E2           00305  addwf PCL,F
002D   0889           00306  dt B'10001001' ; 16e
002E   086B           00307  dt B'01101011' ; 8g
002F   089F           00308  dt B'10011111' ; 16p
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0030   082E           00309  dt B'00101110' ; 2a
0031   087F           00310  dt B'01111111' ; 8p
0032   088E           00311  dt B'10001110' ; 16a
0033   0870           00312  dt B'01110000' ; 8b
0034   089F           00313  dt B'10011111' ; 16p
0035   0829           00314  dt B'00101001' ; 2e
0036   089F           00315  dt B'10011111' ; 16p
0037   08BF           00316  dt B'10111111' ; 32p
0038   0889           00317  dt B'10001001' ; 16e
0039   086B           00318  dt B'01101011' ; 8g
003A   089F           00319  dt B'10011111' ; 16p
003B   082E           00320  dt B'00101110' ; 2a
003C   089F           00321  dt B'10011111' ; 16p
003D   08BF           00322  dt B'10111111' ; 32p
003E   088E           00323  dt B'10001110' ; 16a
003F   0870           00324  dt B'01110000' ; 8b
0040   089F           00325  dt B'10011111' ; 16p
0041   0809           00326  dt B'00001001' ; 1e
0042   087F           00327  dt B'01111111' ; 8p
0043   089F           00328  dt B'10011111' ; 16p
0044   0887           00329  dt B'10000111' ; 16d4
0045   0885           00330  dt B'10000101' ; 16c4
0046   0867           00331  dt B'01100111' ; 8d4
0047   089F           00332  dt B'10011111' ; 16p
0048   0891           00333  dt B'10010001' ; 16c5
0049   0893           00334  dt B'10010011' ; 16d5
004A   0855           00335  dt B'01010101' ; 4e5
004B   085F           00336  dt B'01011111' ; 4p
004C   0891           00337  dt B'10010001' ; 16c5
004D   0891           00338  dt B'10010001' ; 16c5
004E   0870           00339  dt B'01110000' ; 8b
004F   0890           00340  dt B'10010000' ; 16b
0050   086E           00341  dt B'01101110' ; 8a
0051   088E           00342  dt B'10001110' ; 16a
0052   084B           00343  dt B'01001011' ; 4g
0053   0876           00344  dt B'01110110' ; 8f5
0054   0815           00345  dt B'00010101' ; 1e5
                      00346 
                      00347 
                      00348 
                      00349  ; led GPIO value for each led
0055                  00350 led_gpio_table:
0055   01E2           00351  addwf PCL,F
0056   0899           00352  dt GREEN_GPIO + (RED_GREEN_TRIS<<4)
0057   089B           00353  dt RED_GPIO + (RED_GREEN_TRIS<<4)
0058   08AA           00354  dt YELLOW_GPIO + (YELLOW_BLUE_TRIS<<4)
0059   08A9           00355  dt BLUE_GPIO + (YELLOW_BLUE_TRIS<<4)
                      00356  
                      00357 ; TRIS value for each led
                      00358 ;led_tris_table: 
                      00359 ; addwf PCL,F
                      00360 ; dt RED_GREEN_TRIS
                      00361 ; dt RED_GREEN_TRIS
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00362 ; dt YELLOW_BLUE_TRIS
                      00363 ; dt YELLOW_BLUE_TRIS
                      00364 
                      00365 ;;;;;;;  led_on  ;;;;;;;
                      00366 ;; light LED  
                      00367 ;; input: 
                      00368 ;;   variable 'led' 
                      00369 ;;   is LED identifier
                      00370 ;;;;;;;;;;;;;;;;;;;;;;;; 
005A                  00371 led_on:
005A   02??           00372  movfw led
005B   09??           00373  call led_gpio_table
005C   0026           00374  movwf GPIO
005D   0021           00375  movwf TMR0 ; use TMR0 as temporary storage
005E   0381           00376  swapf TMR0,W
005F   0006           00377  tris GPIO
0060   0800           00378  return
                      00379 
                      00380 
                      00381 ;;;;;;;;;;;;;;;;;  read_buttons ;;;;;;;;;;;
                      00382 ;; read GP3 
                      00383 ;; when GP3 == 1
                      00384 ;; check  cap_cnt to identify button
                      00385 ;; WORKING:
                      00386 ;;   first the clamp is released on 'C3'
                      00387 ;;   charging capacitor.
                      00388 ;;   then variable 'cap_cnt' is incremented
                      00389 ;;   until GP3 read as '1'.
                      00390 ;;   The final value of 'cap_cnt' determine
                      00391 ;;   if a button is down and which one. 
                      00392 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
0061                  00393 read_buttons:
0061   00??           00394   clrf btn_down
0062   00??           00395   clrf cap_cnt
                      00396   clamp_off ; capacitor start charging.
0063   0446               M  bcf CLAMP
0064                  00397 rbtn1: ; charging counter loop
0064   0666           00398   btfsc GPIO, GP3
0065   0A??           00399   goto rbtn3
0066   02??           00400   incf cap_cnt,F
0067   0C64           00401   movlw TC_MAX  ; charging timout
0068   00??           00402   subwf cap_cnt, W
0069   0703           00403   skpc
006A   0A??           00404   goto rbtn1
006B   0C04           00405   movlw BTN_NONE ; charging time too long,
006C   00??           00406   movwf btn_down ; assume no button down.
                      00407   clamp_on
006D   0546               M  bsf CLAMP
006E   0800           00408   return
006F                  00409 rbtn3 ; check cap_cnt value to identify button
                      00410   clamp_on ; keep 'C3' discharge when not reading.
006F   0546               M  bsf CLAMP
0070   0C14           00411   movlw GRN_CNT
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0071   00??           00412   subwf cap_cnt, W
0072   0703           00413   skpc
0073   0800           00414   return  ; BTN_GREEN
0074   02??           00415   incf btn_down,F
0075   0C28           00416   movlw RED_CNT
0076   00??           00417   subwf cap_cnt, W
0077   0703           00418   skpc
0078   0800           00419   return ; BTN_RED
0079   02??           00420   incf btn_down,F
007A   0C3C           00421   movlw YEL_CNT
007B   00??           00422   subwf cap_cnt, W
007C   0703           00423   skpc
007D   0800           00424   return ; BTN_YELLOW
007E   02??           00425   incf btn_down,F ; BTN_BLUE
007F   0C50           00426   movlw BLUE_CNT
0080   00??           00427   subwf cap_cnt,W
0081   0603           00428   skpnc
0082   02??           00429   incf btn_down,f ; BTN_NONE
0083   0800           00430   return 
                      00431 
                      00432 ;;;;;; store_note  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00433 ;;; store note in tune_array
                      00434 ;;; inputs:
                      00435 ;;;     t0= array index where to store note {0-31}
                      00436 ;;;     t1=note  {0-3} stored as 2 bits value.
                      00437 ;;; This one is a little tricky because each byte is split in 4 slots of
                      00438 ;;; 2 bits. The position in tune_array is index/4 and the slot is the remainder.  
                      00439 ;;; So there is 4 notes per byte. The note must be stored in the good slot without
                      00440 ;;; altering the contain of others slots.
                      00441 ;;;  bits:  76|54|32|10  
                      00442 ;;;  slots: s3|s2|s1|s0  
                      00443 ;;; To get that result a AND mask is create to reset the slot to 0 and the OR
                      00444 ;;; operation is used to insert the note in the slot.  
                      00445 ;;; exemple: say the index is 6 and the note is 1. then
                      00446 ;;; byte order is 6/4=1
                      00447 ;;; slot is 6 % 4 = 2
                      00448 ;;;  AND mask is 0b11001111
                      00449 ;;                   ^^ slot 2 will be set to 0 after AND operation     
                      00450 ;;;  OR mask is 0b00010000 
                      00451 ;;;                 ^^  slot 2 will be set to 1 after OR operation
                      00452 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
0084                  00453 store_note:
                      00454 ;initialize array pointer    
0084   0C??           00455  movlw tune_array
0085   0024           00456  movwf FSR
                      00457 ; extract the byte order and put in t2 
0086   0CFC           00458  movlw 0xFC
0087   01??           00459  andwf t0,W  ; mask out 2 least significant bits 
0088   00??           00460  movwf t2 ; and put the value in t2
                      00461 ; divide by 4
0089   0403           00462  bcf STATUS, C  
008A   03??           00463  rrf t2,F
008B   03??           00464  rrf t2,F
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

008C   02??           00465  movfw t2
008D   01E4           00466  addwf FSR, F ; FSR=tune_array+index/4
                      00467 ; create AND mask and shift note is right slot
008E   0C03           00468  movlw 3
008F   01??           00469  andwf t1,F ; all bits to 0 except bits 0,1
0090   00??           00470  movwf t2   ; 3->t2
0091   01??           00471  andwf t0,W   ; get slot number
0092   00??           00472  subwf t2,F   ; how many times to shift left.
                      00473 ;create the AND mask
0093   0CFC           00474  movlw 0xFC
0094   00??           00475  movwf t0
0095                  00476 store_note1:
                      00477 ; shift left AND mask and note value
                      00478 ; while shift counter not zero. 
                      00479  brnz shift_left_slot
0095   0743               M  skpz
0096   0A??               M  goto shift_left_slot
                      00480 ; the shifting is done, store note in slot. 
0097   02??           00481  movfw t0  ; AND mask
0098   0160           00482  andwf INDF,F ; reset that slot to 0
0099   02??           00483  movfw t1 ; note to W
009A   0120           00484  iorwf INDF,F ; insert note in slot
009B   0800           00485  return
009C                  00486 shift_left_slot: 
                      00487 ;; shift left mask 1 slot 
009C   0403           00488  bcf STATUS, C
009D   03??           00489  rlf t1,F
009E   03??           00490  rlf t1,F
                      00491 ;; shift left note 1 slot 
009F   0503           00492  bsf STATUS,C 
00A0   03??           00493  rlf t0,F
00A1   03??           00494  rlf t0,F
00A2   00??           00495  decf t2,F
00A3   0A??           00496  goto store_note1
                      00497 
                      00498 ;;;;;;  load_note  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00499 ;;; get note from tune_array and put it in W 
                      00500 ;;; input: W is array index  {0-31}
                      00501 ;;; output: t1 note {0-3}
                      00502 ;;; byte_order is index/4
                      00503 ;;; slot is index % 4
                      00504 ;;; AND mask is inverse of that store_note
                      00505 ;;; because to read a slot we want to keep the
                      00506 ;;; contain of the slot and zero all other bits.
                      00507 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
00A4                  00508 load_note:
00A4   00??           00509  movwf t0 ; save index
                      00510 ; set array pointer
00A5   0C??           00511  movlw tune_array
00A6   0024           00512  movwf FSR
00A7   0CFC           00513  movlw 0xFC
00A8   01??           00514  andwf t0,W
00A9   00??           00515  movwf t1
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00516 ; divide index by 4 
00AA   0403           00517  bcf STATUS,C
00AB   03??           00518  rrf t1,F
00AC   03??           00519  rrf t1,W
00AD   01E4           00520  addwf FSR,F  ; FSR=tune_array+index/4
00AE   0200           00521  movfw INDF   ; get the byte containing the note slot
00AF   00??           00522  movwf t1 ; save it in t1
00B0   0C03           00523  movlw 3
00B1   00??           00524  movwf t2 ; the AND mask 
00B2   01??           00525  andwf t0,W ; slot number index % 4 same as 2 least significant bits.
00B3   00??           00526  subwf t2,F ; how many times t1 mus be shifted right to put the slot in bits 1:0
00B4                  00527 load_note1:
                      00528 ; first shift right until the slot is in bits 1:0
                      00529  brnz rotate_right_twice
00B4   0743               M  skpz
00B5   0A??               M  goto rotate_right_twice
                      00530 ; shifting done keep bits 1:0
                      00531 ; and mask all other to zero.
00B6   0C03           00532  movlw 3
00B7   01??           00533  andwf t1,F  ; W=note
00B8   0800           00534  return
                      00535 ; slot shifted right 1 position 
00B9                  00536 rotate_right_twice:
00B9   03??           00537  rrf t1,F
00BA   03??           00538  rrf t1,F
00BB   00??           00539  decf t2,F
00BC   0A??           00540  goto load_note1
                      00541 
                      00542 
                      00543 ;;;;;;;;;  random  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00544 ;; pseudo random number generator
                      00545 ;; 24 bits linear feedback shift register 
                      00546 ;; REF: http://en.wikipedia.org/wiki/Linear_feedback_shift_register
                      00547 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00BD                  00548 random:  
00BD   0403           00549   clrc
00BE   03??           00550   rrf randU,F
00BF   03??           00551   rrf randH,F
00C0   03??           00552   rrf rand,F
00C1   0703           00553   skpc
00C2   0800           00554   return
00C3   0CE1           00555   movlw 0xE1
00C4   01??           00556   xorwf randU, F
00C5   0800           00557   return
                      00558 
                      00559 ;;;;;;;;;;   wait_btn_release  ;;;;;
                      00560 ;; repeatedly read buttons until 
                      00561 ;; until it return BTN_NONE
                      00562 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
00C6                  00563 wait_btn_release:
00C6   09??           00564  call read_buttons
                      00565  skpeq btn_down, BTN_NONE
00C7   0C04               M   movlw 4
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00C8   01??               M   xorwf btn_down, W
00C9   0743               M   skpz
00CA   0A??           00566  goto wait_btn_release
00CB   0800           00567  return
                      00568 
                      00569 
                      00570 ;;;;;;;;;;;;; note  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00571 ; play a musical note from tempered scale. 
                      00572 ; input:
                      00573 ;  w = note : encoding  bits 0-4 notes, note 0x1F=pause , bits 5-7 timelapse
                      00574 ; WORKING:
                      00575 ;  This subroutine is cycle counted.
                      00576 ;  Tones period are based on Tcy=1uSec
                      00577 ;  Each path in half-cycle loop is 10 Tcy.
                      00578 ;  Frequencies values are computed based on this 10 Tcy.
                      00579 ;  Any change on this code will alter the frequencies. 
                      00580 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
00CC                  00581 note:
00CC   00??           00582  movwf t0
00CD   0C1F           00583  movlw 0x1F
00CE   01??           00584  andwf t0,W
00CF   0F1F           00585  xorlw 0x1F
                      00586  brz pause
00D0   0643               M  skpnz
00D1   0A??               M  goto pause
                      00587  loadr16 delay, 0x0D40
  0000                    M  local h,l
  0000000D                M  h=high 0x0D40
  00000040                M  l=low 0x0D40
                          M  if l==0
                          M    clrf delay
                          M  else
00D2   0C40               M    movlw low 0x0D40
00D3   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
00D4   0C0D               M    movlw h
00D5   00??               M    movwf delay+1
                          M  endif
00D6   0C03           00588  movlw 3
00D7   00??           00589  movwf timeout
00D8   0CE0           00590  movlw 0xE0
00D9   01??           00591  andwf t0,W
00DA   00??           00592  movwf t1
00DB   03??           00593  swapf t1,F
00DC   03??           00594  rrf t1,F
00DD   02??           00595  movf t1,F
                      00596  brz note02
00DE   0643               M  skpnz
00DF   0A??               M  goto note02
00E0                  00597 note01:
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00E0   0403           00598  bcf STATUS,C
00E1   03??           00599  rrf timeout
00E2   03??           00600  rrf delay+1,F
00E3   03??           00601  rrf delay,F
00E4   02??           00602  decfsz t1
00E5   0A??           00603  goto note01
00E6                  00604 note02:
00E6   0C1F           00605  movlw 0x1F
00E7   01??           00606  andwf t0,W
00E8   09??           00607  call note_table
00E9   00??           00608  movwf half_period
00EA                  00609 note1:
00EA   0C04           00610  movlw B'0100'
00EB   01A6           00611  xorwf GPIO, F  ; toggle output pin
00EC   02??           00612  movfw half_period
00ED   00??           00613  movwf t0
00EE                  00614 note2:
00EE   00??           00615  decf delay,F
00EF   02??           00616  comf delay,W
00F0   0743           00617  skpz
00F1   0A??           00618  goto note3
00F2   00??           00619  decf delay+1,F
00F3   02??           00620  comf delay+1,W
00F4   0743           00621  skpz
00F5   0A??           00622  goto note4  ; to get 10 Tcy in this path must goto note4
00F6   00??           00623  decf timeout,F
00F7   02??           00624  comf timeout,W
00F8   0643           00625  skpnz
00F9   0A??           00626  goto note5
00FA                  00627 note3:
00FA   0A??           00628  goto $+1
00FB                  00629 note4:
00FB   02??           00630  decfsz t0
00FC   0A??           00631  goto note2  ; half-cycle loop
00FD   0A??           00632  goto note1 ; half-cycle completed
00FE                  00633 note5:
                      00634  clamp_on
00FE   0546               M  bsf CLAMP
00FF   0800           00635  return
                      00636 
                      00637 ;;;;; musical pause ;;;;;;;;;;;;;;
                      00638 ;; when note value is 0x1F
                      00639 ;; tone subroutine branch here.
                      00640 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
0100                  00641 pause: ;musical pause
                      00642  loadr16 delay, 2000
  0000                    M  local h,l
  00000007                M  h=high 2000
  000000D0                M  l=low 2000
                          M  if l==0
                          M    clrf delay
                          M  else
0100   0CD0               M    movlw low 2000
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0101   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
0102   0C07               M    movlw h
0103   00??               M    movwf delay+1
                          M  endif
0104   03??           00643  swapf t0,F
0105   03??           00644  rrf t0,F
0106   0C07           00645  movlw 0x7
0107   01??           00646  andwf t0,F
0108   0643           00647  skpnz
0109   0A??           00648  goto pause01
010A                  00649 pause00: 
010A   0403           00650  clrc
010B   03??           00651  rrf delay+1,F
010C   03??           00652  rrf delay,F
010D   02??           00653  decfsz t0,F
010E   0A??           00654  goto pause00
010F                  00655 pause01: 
010F   09??           00656  call delay_ms
0110   0800           00657  return
                      00658 
                      00659 
                      00660     
                      00661 ;;;;;;;;;;;;;;;  INITIALIZATION CODE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00662  ; hardware initialization
0111                  00663 init:
0111   0C41           00664  movlw OPTION_MASK
0112   0002           00665  option 
                      00666  led_off
0113   0C0B               M  movlw B'1011'
0114   0006               M  tris GPIO
0115   00??           00667  clrf notes_cnt
0116   0CA5           00668  movlw 0xA5
0117   00??           00669  movwf rand
                      00670  clamp_on
0118   0546               M  bsf CLAMP
                      00671 
                      00672 ;;;;;;;;;;;;;;;;;;;;;;;;  MAIN PROCEDURE  ;;;;;;;;;;;;;;;;;;;;;
                      00673 ; the biggest share of the code is here
                      00674 ; because subroutine calls are limited to 2 levels
                      00675 ; It use a lot of goto instead of call.
                      00676 ; I like to factor code in many subroutines that neast each others
                      00677 ; but this is not possible with this MCU.
                      00678 ; Here is spaghetti code for your degustation (or disgustation), MCU obliged. 
                      00679 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
0119                  00680 main:
                      00681 ;;;;;;;;;;;;;;;;;;;;;;;;
                      00682 ;; power on self test
                      00683 ;; light each LED in sequence
                      00684 ;; with associated tone.
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00685 ;;;;;;;;;;;;;;;;;;;;;;;; 
0119   00??           00686  clrf led
011A                  00687 post:
011A   09??           00688  call led_on
011B   02??           00689  movfw led
011C   09??           00690  call translate_table
011D   09??           00691  call note
011E   02??           00692  incf led,F
011F   0740           00693  btfss led, 2
0120   0A??           00694  goto post
                      00695  led_off
0121   0C0B               M  movlw B'1011'
0122   0006               M  tris GPIO
0123   09??           00696  call wait_btn_release
0124                  00697 next_set:
0124   00??           00698  clrf led
0125   0C86           00699  movlw .134
0126   00??           00700  movwf timeout
                      00701 ; wait for a button down to start game
                      00702 ; light LEDs in sequence
                      00703 ;until a button is pressed down or timeout occur 
0127                  00704 led_sweep:
0127   02??           00705  decfsz timeout,F
0128   0A??           00706  goto keep_going
0129   0A??           00707  goto init  ; after about 35 seconds of idle time, reset.
012A                  00708 keep_going: 
012A   09??           00709  call led_on
                      00710  loadr16 delay, .250
  0000                    M  local h,l
  00000000                M  h=high .250
  000000FA                M  l=low .250
                          M  if l==0
                          M    clrf delay
                          M  else
012B   0CFA               M    movlw low .250
012C   00??               M    movwf delay
                          M  endif
                          M  if h==0
012D   00??               M    clrf delay+1
                          M  else
                          M    movlw h
                          M    movwf delay+1
                          M  endif
012E   09??           00711  call delay_ms
012F   02??           00712  incf led,F
0130   0C03           00713  movlw 3
0131   01??           00714  andwf led,F
0132   09??           00715  call read_buttons
                      00716  skpneq btn_down, BTN_NONE
0133   0C04               M  movlw 4
0134   01??               M  xorwf btn_down, W
0135   0643               M  skpnz
0136   0A??           00717  goto led_sweep
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00718  led_off
0137   0C0B               M  movlw B'1011'
0138   0006               M  tris GPIO
0139   02??           00719  movfw timeout
013A   00??           00720  movwf rand
013B   09??           00721  call wait_btn_release
                      00722  loadr16 delay, .500
  0000                    M  local h,l
  00000001                M  h=high .500
  000000F4                M  l=low .500
                          M  if l==0
                          M    clrf delay
                          M  else
013C   0CF4               M    movlw low .500
013D   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
013E   0C01               M    movlw h
013F   00??               M    movwf delay+1
                          M  endif
0140   09??           00723  call delay_ms
                      00724 ; game loop.
0141                  00725 play_rand:
0141   02??           00726  movfw notes_cnt
0142   00??           00727  movwf t0
0143   02??           00728  incf notes_cnt,F
                      00729 ; add a random value to sequence 
0144   09??           00730  call random
0145   02??           00731  movfw randU
0146   01??           00732  xorwf randH,W
0147   01??           00733  xorwf rand,W
0148   0E03           00734  andlw 3
0149   00??           00735  movwf t1
014A   09??           00736  call store_note
014B   00??           00737  clrf t3 ; notes counter
                      00738 ; play sequence loop 
014C                  00739 play_rand02:
014C   02??           00740  movfw t3
014D   09??           00741  call load_note
014E   02??           00742  movfw t1
014F   00??           00743  movwf led
0150   09??           00744  call led_on
0151   02??           00745  movfw led
0152   09??           00746  call translate_table
0153   09??           00747  call note
                      00748  led_off
0154   0C0B               M  movlw B'1011'
0155   0006               M  tris GPIO
                      00749  loadr16 delay, .100
  0000                    M  local h,l
  00000000                M  h=high .100
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000064                M  l=low .100
                          M  if l==0
                          M    clrf delay
                          M  else
0156   0C64               M    movlw low .100
0157   00??               M    movwf delay
                          M  endif
                          M  if h==0
0158   00??               M    clrf delay+1
                          M  else
                          M    movlw h
                          M    movwf delay+1
                          M  endif
0159   09??           00750  call delay_ms ; 1/10 second pause
015A   02??           00751  incf t3,F
015B   02??           00752  movfw notes_cnt
015C   00??           00753  subwf t3,W
015D   0743           00754  skpz
015E   0A??           00755  goto play_rand02
                      00756 ; wait player playing sequence back
015F                  00757 wait_playback:
015F   00??           00758  clrf t3 ; notes counter
0160                  00759 wait01:
0160   0CFA           00760  movlw .250   ; maximun delay between each button 250 msec.
0161   00??           00761  movwf timeout
0162                  00762 wait02: ; wait button loop
                      00763  loadr16 delay, .20
  0000                    M  local h,l
  00000000                M  h=high .20
  00000014                M  l=low .20
                          M  if l==0
                          M    clrf delay
                          M  else
0162   0C14               M    movlw low .20
0163   00??               M    movwf delay
                          M  endif
                          M  if h==0
0164   00??               M    clrf delay+1
                          M  else
                          M    movlw h
                          M    movwf delay+1
                          M  endif
0165   09??           00764  call delay_ms
0166   02??           00765  movfw timeout
0167   00??           00766  movwf rand
0168   00??           00767  decf timeout,F
0169   0643           00768  skpnz
016A   0A??           00769  goto game_over
016B   09??           00770  call read_buttons
                      00771  skpneq btn_down, BTN_NONE
016C   0C04               M  movlw 4
016D   01??               M  xorwf btn_down, W
016E   0643               M  skpnz
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

016F   0A??           00772  goto wait02
                      00773  loadr16 delay, .10  ; wait 10 msec before buttons
  0000                    M  local h,l
  00000000                M  h=high .10
  0000000A                M  l=low .10
                          M  if l==0
                          M    clrf delay
                          M  else
0170   0C0A               M    movlw low .10
0171   00??               M    movwf delay
                          M  endif
                          M  if h==0
0172   00??               M    clrf delay+1
                          M  else
                          M    movlw h
                          M    movwf delay+1
                          M  endif
0173   09??           00774  call delay_ms       ; debouncing
0174   09??           00775  call read_buttons
                      00776  skpneq btn_down, BTN_NONE
0175   0C04               M  movlw 4
0176   01??               M  xorwf btn_down, W
0177   0643               M  skpnz
0178   0A??           00777  goto wait01 ; no button down
                      00778 ; light LED and play tone corresponding to that button
0179   02??           00779  movfw btn_down
017A   00??           00780  movwf led
017B   09??           00781  call led_on
017C   02??           00782  movfw led
017D   09??           00783  call translate_table
017E   09??           00784  call note
                      00785  led_off
017F   0C0B               M  movlw B'1011'
0180   0006               M  tris GPIO
0181   09??           00786  call wait_btn_release
0182   02??           00787  movfw t3
0183   09??           00788  call load_note
0184   02??           00789  movfw led
0185   00??           00790  subwf t1
0186   0743           00791  skpz
0187   0A??           00792  goto game_over ; not the good one
0188   02??           00793  incf t3,F
0189   02??           00794  movfw notes_cnt
018A   00??           00795  subwf t3,W
018B   0743           00796  skpz
018C   0A??           00797  goto wait01 ; loop to wait for next button
018D                  00798 playback_success
                      00799 ; to understand this 'switch' and 'case'
                      00800 ; machanism see macros above. 
                      00801  switch notes_cnt
018D   02??               M  movfw notes_cnt
                      00802  case .6, victory
018E   0F06               M  xorlw .6
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M  brz victory
018F   0643               M  skpnz
0190   0A??               M  goto victory
0191   0F06               M  xorlw .6 ; reset W for next case
                      00803  case .12, victory
0192   0F0C               M  xorlw .12
                          M  brz victory
0193   0643               M  skpnz
0194   0A??               M  goto victory
0195   0F0C               M  xorlw .12 ; reset W for next case
                      00804  case .18, victory
0196   0F12               M  xorlw .18
                          M  brz victory
0197   0643               M  skpnz
0198   0A??               M  goto victory
0199   0F12               M  xorlw .18 ; reset W for next case
                      00805  case .24, victory
019A   0F18               M  xorlw .24
                          M  brz victory
019B   0643               M  skpnz
019C   0A??               M  goto victory
019D   0F18               M  xorlw .24 ; reset W for next case
                      00806  case .32, victory_final
019E   0F20               M  xorlw .32
                          M  brz victory_final
019F   0643               M  skpnz
01A0   0A??               M  goto victory_final
01A1   0F20               M  xorlw .32 ; reset W for next case
                      00807  loadr16 delay, .500
  0000                    M  local h,l
  00000001                M  h=high .500
  000000F4                M  l=low .500
                          M  if l==0
                          M    clrf delay
                          M  else
01A2   0CF4               M    movlw low .500
01A3   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
01A4   0C01               M    movlw h
01A5   00??               M    movwf delay+1
                          M  endif
                      00808 ; this the default case 
01A6   09??           00809  call delay_ms
01A7   0A??           00810  goto play_rand
                      00811 ; play rocky_theme at 6,12,18,24 and 32 length success.
                      00812 ; more notes of the theme are played at each milestone.
                      00813 ; If player get at maximum sequence length (i.e. 32)
                      00814 ; the theme is played to end. 
01A8                  00815 victory:
01A8   02??           00816  movfw notes_cnt
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01A9   0A??           00817  goto play_victory_theme
                      00818 ; play complete rocky theme.
01AA                  00819 victory_final:
01AA   00??           00820  clrf notes_cnt
01AB   0C28           00821  movlw .40
01AC                  00822 play_victory_theme:
01AC   00??           00823  movwf t2
01AD   00??           00824  clrf t3
01AE                  00825 prt01:
01AE   02??           00826  movfw t3
01AF   09??           00827  call rocky_theme
01B0   09??           00828  call note
01B1   02??           00829  incf t3,F
01B2   02??           00830  movfw t2
01B3   00??           00831  subwf t3,W
01B4   0743           00832  skpz
01B5   0A??           00833  goto prt01
                      00834  loadr16 delay, 0x400
  0000                    M  local h,l
  00000004                M  h=high 0x400
  00000000                M  l=low 0x400
                          M  if l==0
01B6   00??               M    clrf delay
                          M  else
                          M    movlw low 0x400
                          M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
01B7   0C04               M    movlw h
01B8   00??               M    movwf delay+1
                          M  endif
01B9   09??           00835  call delay_ms
01BA   0C20           00836  movlw 32
01BB   01??           00837  xorwf notes_cnt,W
01BC   0743           00838  skpz
01BD   0A??           00839  goto play_rand
01BE   0A??           00840  goto init
                      00841  
                      00842 ; player failed to repeat sequence
01BF                  00843 game_over:
01BF   0C38           00844  movlw B'00111000'
01C0   09??           00845  call note ; audio alert game over
                      00846 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00847 ;; display sequence length
                      00848 ;; BLUE is 25
                      00849 ;; YELLOW is 10
                      00850 ;; RED is 5
                      00851 ;; GREEN is 1
                      00852 ;; length=NB*25+NY*10+NR*5+NG
                      00853 ;; where Nx is number of blink of
                      00854 ;; each LED.
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00855 ;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                      00856 #define len notes_cnt
01C1   00??           00857  decf len,F
01C2                  00858 display_length:
01C2   02??           00859  movf len,F
01C3   0643           00860  skpnz
01C4   0A??           00861  goto wait1sec
01C5   0C03           00862  movlw 3
01C6   00??           00863  movwf led
01C7   0C19           00864  movlw .25
01C8   00??           00865  subwf len,W
01C9   0703           00866  skpc
01CA   0A??           00867  goto lt25 ; <25
01CB   00??           00868  movwf len
01CC   0A??           00869  goto blink_led
01CD                  00870 lt25:
01CD   00??           00871  decf led,F
01CE   0C0A           00872  movlw .10
01CF   00??           00873  subwf len,W
01D0   0703           00874  skpc
01D1   0A??           00875  goto lt10; <10
01D2   00??           00876  movwf len
01D3   0A??           00877  goto blink_led
01D4                  00878 lt10:
01D4   00??           00879  decf led,F
01D5   0C05           00880  movlw .5
01D6   00??           00881  subwf len,W
01D7   0703           00882  skpc
01D8   0A??           00883  goto lt5 ; <5
01D9   00??           00884  movwf len
01DA   0A??           00885  goto blink_led
01DB                  00886 lt5:
01DB   00??           00887  decf led,F
01DC   00??           00888  decf len,F
01DD                  00889 blink_led:
01DD   09??           00890  call led_on
                      00891  loadr16 delay, .500
  0000                    M  local h,l
  00000001                M  h=high .500
  000000F4                M  l=low .500
                          M  if l==0
                          M    clrf delay
                          M  else
01DE   0CF4               M    movlw low .500
01DF   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
01E0   0C01               M    movlw h
01E1   00??               M    movwf delay+1
                          M  endif
01E2   09??           00892  call delay_ms ; 500 msec pause
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00893  led_off
01E3   0C0B               M  movlw B'1011'
01E4   0006               M  tris GPIO
                      00894  loadr16 delay, .500
  0000                    M  local h,l
  00000001                M  h=high .500
  000000F4                M  l=low .500
                          M  if l==0
                          M    clrf delay
                          M  else
01E5   0CF4               M    movlw low .500
01E6   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
01E7   0C01               M    movlw h
01E8   00??               M    movwf delay+1
                          M  endif
01E9   09??           00895  call delay_ms ; 500 msec pause
01EA   0A??           00896  goto display_length
                      00897 ;wait 1 second before resuming
                      00898 ;to next_set 
01EB                  00899 wait1sec:
                      00900  loadr16 delay, .1000
  0000                    M  local h,l
  00000003                M  h=high .1000
  000000E8                M  l=low .1000
                          M  if l==0
                          M    clrf delay
                          M  else
01EB   0CE8               M    movlw low .1000
01EC   00??               M    movwf delay
                          M  endif
                          M  if h==0
                          M    clrf delay+1
                          M  else
01ED   0C03               M    movlw h
01EE   00??               M    movwf delay+1
                          M  endif
01EF   09??           00901  call delay_ms
01F0   0A??           00902  goto next_set
                      00903  
0FEB                  00904  end
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE 23


SYMBOL TABLE
  LABEL                             VALUE 

AUDIO                             GPIO, GP2
BLUE                              3
BLUE_CNT                          4*GRN_CNT
BLUE_GPIO                         B'1001'
BLUE_NOTE                         B'01001100'
BTN_BLUE                          3
BTN_GREEN                         0
BTN_NONE                          4
BTN_RED                           1
BTN_YELLOW                        2
C                                 00000000
CAL0                              00000001
CAL1                              00000002
CAL2                              00000003
CAL3                              00000004
CAL4                              00000005
CAL5                              00000006
CAL6                              00000007
CLAMP                             GPIO, GP2
DC                                00000001
F                                 00000001
FOSC4                             00000000
FSR                               00000004
GP0                               00000000
GP1                               00000001
GP2                               00000002
GP3                               00000003
GPIO                              00000006
GPWUF                             00000007
GREEN                             0
GREEN_GPIO                        B'1001'
GREEN_NOTE                        B'01000000'
GRN_CNT                           20
HALF                              B'00111111'
HEIGHT                            B'01111111'
INDF                              00000000
NOT_GPPU                          00000006
NOT_GPWU                          00000007
NOT_PD                            00000003
NOT_TO                            00000004
OPTION_MASK                       B'01000001'
OSCCAL                            00000005
PCL                               00000002
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
QUARTER                           B'01011111'
RED                               1
RED_CNT                           2*GRN_CNT
RED_GPIO                          B'1011'
RED_GREEN_TRIS                    B'1001'
RED_NOTE                          B'01000101'
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE 24


SYMBOL TABLE
  LABEL                             VALUE 

SIXTEENTH                         B'10011111'
STATUS                            00000003
T0CS                              00000005
T0SE                              00000004
TC_MAX                            5*GRN_CNT
THIRTY2TH                         B'10111111'
TMR0                              00000001
TRISIO0                           00000000
TRISIO1                           00000001
TRISIO2                           00000002
TRISIO3                           00000003
W                                 00000000
WHOLE                             B'00011111'
YELLOW                            2
YELLOW_BLUE_TRIS                  B'1010'
YELLOW_GPIO                       B'1010'
YELLOW_NOTE                       B'01001001'
YEL_CNT                           3*GRN_CNT
Z                                 00000002
_.org_0_0005                      00000005
_.org_0_00FA                      000000FA
_CONFIG                           00000FFF
_CP_OFF                           00000FFF
_CP_ON                            00000FF7
_IDLOC0                           00000200
_IDLOC1                           00000201
_IDLOC2                           00000202
_IDLOC3                           00000203
_IntRC_OSC                        00000FFF
_MCLRE_OFF                        00000FEF
_MCLRE_ON                         00000FFF
_OSC_IntRC                        00000FFF
_WDTE_OFF                         00000FFB
_WDTE_ON                          00000FFF
_WDT_OFF                          00000FFB
_WDT_ON                           00000FFF
__10F202                          00000001
blink_led                         000001DD
brc                               
brnc                              
brnz                              
brz                               
btn_down                          00000000
cap_cnt                           00000007
case                              
clamp_off                         
clamp_on                          
delay                             00000002
delayH                            delay+1
delay_ms                          00000001
display_length                    000001C2
game_over                         000001BF
half_period                       00000004
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE 25


SYMBOL TABLE
  LABEL                             VALUE 

init                              00000111
keep_going                        0000012A
led                               00000001
led_gpio_table                    00000055
led_off                           
led_on                            0000005A
led_sweep                         00000127
len                               notes_cnt
load_note                         000000A4
load_note1                        000000B4
loadr16                           
lt10                              000001D4
lt25                              000001CD
lt5                               000001DB
main                              00000119
next_set                          00000124
note                              000000CC
note01                            000000E0
note02                            000000E6
note1                             000000EA
note2                             000000EE
note3                             000000FA
note4                             000000FB
note5                             000000FE
note_off                          
note_on                           
note_table                        00000012
notes_cnt                         00000008
pause                             00000100
pause00                           0000010A
pause01                           0000010F
play_rand                         00000141
play_rand02                       0000014C
play_victory_theme                000001AC
playback_success                  0000018D
post                              0000011A
prt01                             000001AE
rand                              00000009
randH                             rand+1
randU                             rand+2
random                            000000BD
rbtn1                             00000064
rbtn3                             0000006F
read_buttons                      00000061
rocky_theme                       0000002C
rotate_right_twice                000000B9
shift_left_slot                   0000009C
skpeq                             
skpneq                            
store_note                        00000084
store_note1                       00000095
switch                            
t0                                00000014
MPASM 5.71                   POCKETSIMON.ASM   1-3-2017  23:06:19         PAGE 26


SYMBOL TABLE
  LABEL                             VALUE 

t1                                00000015
t2                                00000016
t3                                00000017
timeout                           00000005
timeoutH                          timeout+1
translate_table                   0000000D
tune_array                        0000000C
victory                           000001A8
victory_final                     000001AA
wait01                            00000160
wait02                            00000162
wait1sec                          000001EB
wait_btn_release                  000000C6
wait_playback                     0000015F

Errors   :     0
Warnings :     0 reported,    51 suppressed
Messages :     0 reported,     4 suppressed

